<!DOCTYPE html>
<html lang="en">
  <head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title></title>
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link href="../../../../../_static/bootstrap/css/bootstrap.css" rel="stylesheet">
    <style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
    </style>
    <link href="../../../../../_static/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="../../../../../_static/pygments.css" rel="stylesheet">
    <link href="../../../../../_static/rocco.css" rel="stylesheet">
  </head>
  <body>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="../../../../../">nanodoc</a>
        </div>
      </div>
    </div>
    <div class="container-fluid">
      <div class="row-fluid">
        <div class="span12">
          <ul class="breadcrumb">
            <li>
              <a href="../../../../../">nanodoc</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../../../../">site</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../../../">static</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../../">bootstrap</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../">js</a>
              <span class="divider">/</span>
            </li>
            <li class="active">bootstrap.js</li>
          </ul>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span2 well well-small">
          <ul class="nav nav-list">
            <li class="active">
              <i class="icon-hand-right"></i>
              <b>bootstrap.js</b>
            </li>
          </ul>
        </div>
        <div class="span10">
          <table class="table">
            <tbody>
              <tr id="line-1">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1">
                      1
                      ¶
                    </a>
                  </div>
                  <p>===================================================
                   * bootstrap-transition.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#transitions
                   * ===================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * ========================================================== */</p>
                </td>
              </tr>
              <tr id="line-4">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-4">
                      4
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-8">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-8">
                      8
                      ¶
                    </a>
                  </div>
                  <p>CSS TRANSITION SUPPORT (http://www.modernizr.com/)
                     * ======================================================= */</p>
                </td>
                <td class="code"><pre>  $(<span class="kd">function</span> () {

    $.support.transition <span class="o">=</span> (<span class="kd">function</span> () {

      <span class="kd">var</span> transitionEnd <span class="o">=</span> (<span class="kd">function</span> () {

        <span class="kd">var</span> el <span class="o">=</span> <span class="nb">document</span>.createElement(<span class="s1">'bootstrap'</span>)
          , transEndEventNames <span class="o">=</span> {
               <span class="s1">'WebkitTransition'</span> <span class="o">:</span> <span class="s1">'webkitTransitionEnd'</span>
            ,  <span class="s1">'MozTransition'</span>    <span class="o">:</span> <span class="s1">'transitionend'</span>
            ,  <span class="s1">'OTransition'</span>      <span class="o">:</span> <span class="s1">'oTransitionEnd otransitionend'</span>
            ,  <span class="s1">'transition'</span>       <span class="o">:</span> <span class="s1">'transitionend'</span>
            }
          , name

        <span class="k">for</span> (name <span class="k">in</span> transEndEventNames){
          <span class="k">if</span> (el.style[name] <span class="o">!==</span> <span class="kc">undefined</span>) {
            <span class="k">return</span> transEndEventNames[name]
          }
        }

      }())

      <span class="k">return</span> transitionEnd <span class="o">&amp;&amp;</span> {
        end<span class="o">:</span> transitionEnd
      }

    })()

  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* ==========================================================
 * bootstrap-alert.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-48">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-48">
                      48
                      ¶
                    </a>
                  </div>
                  <p>ALERT CLASS DEFINITION
                    * ====================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> dismiss <span class="o">=</span> <span class="s1">'[data-dismiss="alert"]'</span>
    , Alert <span class="o">=</span> <span class="kd">function</span> (el) {
        $(el).on(<span class="s1">'click'</span>, dismiss, <span class="k">this</span>.close)
      }

  Alert.prototype.close <span class="o">=</span> <span class="kd">function</span> (e) {
    <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
      , selector <span class="o">=</span> $this.attr(<span class="s1">'data-target'</span>)
      , $parent

    <span class="k">if</span> (<span class="o">!</span>selector) {
      selector <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)
      selector <span class="o">=</span> selector <span class="o">&amp;&amp;</span> selector.replace(<span class="sr">/.*(?=#[^\s]*$)/</span>, <span class="s1">''</span>) <span class="c1">//strip for ie7
</span>    }

    $parent <span class="o">=</span> $(selector)

    e <span class="o">&amp;&amp;</span> e.preventDefault()

    $parent.length <span class="o">||</span> ($parent <span class="o">=</span> $this.hasClass(<span class="s1">'alert'</span>) <span class="o">?</span> $this <span class="o">:</span> $this.parent())

    $parent.trigger(e <span class="o">=</span> $.Event(<span class="s1">'close'</span>))

    <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>

    $parent.removeClass(<span class="s1">'in'</span>)

    <span class="kd">function</span> removeElement() {
      $parent
        .trigger(<span class="s1">'closed'</span>)
        .remove()
    }

    $.support.transition <span class="o">&amp;&amp;</span> $parent.hasClass(<span class="s1">'fade'</span>) <span class="o">?</span>
      $parent.on($.support.transition.end, removeElement) <span class="o">:</span>
      removeElement()
  }
</pre></td>
              </tr>
              <tr id="line-88">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-88">
                      88
                      ¶
                    </a>
                  </div>
                  <p>ALERT PLUGIN DEFINITION
                    * ======================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.alert

  $.fn.alert <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'alert'</span>)
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'alert'</span>, (data <span class="o">=</span> <span class="k">new</span> Alert(<span class="k">this</span>)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option].call($this)
    })
  }

  $.fn.alert.Constructor <span class="o">=</span> Alert
</pre></td>
              </tr>
              <tr id="line-104">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-104">
                      104
                      ¶
                    </a>
                  </div>
                  <p>ALERT NO CONFLICT
                    * ================= */</p>
                </td>
                <td class="code"><pre>  $.fn.alert.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.alert <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-112">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-112">
                      112
                      ¶
                    </a>
                  </div>
                  <p>ALERT DATA-API
                    * ============== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.alert.data-api'</span>, dismiss, Alert.prototype.close)

}(<span class="nb">window</span>.jQuery);<span class="cm">/* ============================================================
 * bootstrap-button.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#buttons
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-123">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-123">
                      123
                      ¶
                    </a>
                  </div>
                  <p>BUTTON PUBLIC CLASS DEFINITION
                    * ============================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Button <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
    <span class="k">this</span>.options <span class="o">=</span> $.extend({}, $.fn.button.defaults, options)
  }

  Button.prototype.setState <span class="o">=</span> <span class="kd">function</span> (state) {
    <span class="kd">var</span> d <span class="o">=</span> <span class="s1">'disabled'</span>
      , $el <span class="o">=</span> <span class="k">this</span>.$element
      , data <span class="o">=</span> $el.data()
      , val <span class="o">=</span> $el.is(<span class="s1">'input'</span>) <span class="o">?</span> <span class="s1">'val'</span> <span class="o">:</span> <span class="s1">'html'</span>

    state <span class="o">=</span> state <span class="o">+</span> <span class="s1">'Text'</span>
    data.resetText <span class="o">||</span> $el.data(<span class="s1">'resetText'</span>, $el[val]())

    $el[val](data[state] <span class="o">||</span> <span class="k">this</span>.options[state])

    <span class="c1">// push to event loop to allow forms to submit
</span>    setTimeout(<span class="kd">function</span> () {
      state <span class="o">==</span> <span class="s1">'loadingText'</span> <span class="o">?</span>
        $el.addClass(d).attr(d, d) <span class="o">:</span>
        $el.removeClass(d).removeAttr(d)
    }, <span class="mi">0</span>)
  }

  Button.prototype.toggle <span class="o">=</span> <span class="kd">function</span> () {
    <span class="kd">var</span> $parent <span class="o">=</span> <span class="k">this</span>.$element.closest(<span class="s1">'[data-toggle="buttons-radio"]'</span>)

    $parent <span class="o">&amp;&amp;</span> $parent
      .find(<span class="s1">'.active'</span>)
      .removeClass(<span class="s1">'active'</span>)

    <span class="k">this</span>.$element.toggleClass(<span class="s1">'active'</span>)
  }
</pre></td>
              </tr>
              <tr id="line-159">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-159">
                      159
                      ¶
                    </a>
                  </div>
                  <p>BUTTON PLUGIN DEFINITION
                    * ======================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.button

  $.fn.button <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'button'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'button'</span>, (data <span class="o">=</span> <span class="k">new</span> Button(<span class="k">this</span>, options)))
      <span class="k">if</span> (option <span class="o">==</span> <span class="s1">'toggle'</span>) data.toggle()
      <span class="k">else</span> <span class="k">if</span> (option) data.setState(option)
    })
  }

  $.fn.button.defaults <span class="o">=</span> {
    loadingText<span class="o">:</span> <span class="s1">'loading...'</span>
  }

  $.fn.button.Constructor <span class="o">=</span> Button
</pre></td>
              </tr>
              <tr id="line-181">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-181">
                      181
                      ¶
                    </a>
                  </div>
                  <p>BUTTON NO CONFLICT
                    * ================== */</p>
                </td>
                <td class="code"><pre>  $.fn.button.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.button <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-189">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-189">
                      189
                      ¶
                    </a>
                  </div>
                  <p>BUTTON DATA-API
                    * =============== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.button.data-api'</span>, <span class="s1">'[data-toggle^=button]'</span>, <span class="kd">function</span> (e) {
    <span class="kd">var</span> $btn <span class="o">=</span> $(e.target)
    <span class="k">if</span> (<span class="o">!</span>$btn.hasClass(<span class="s1">'btn'</span>)) $btn <span class="o">=</span> $btn.closest(<span class="s1">'.btn'</span>)
    $btn.button(<span class="s1">'toggle'</span>)
  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* ==========================================================
 * bootstrap-carousel.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-204">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-204">
                      204
                      ¶
                    </a>
                  </div>
                  <p>CAROUSEL CLASS DEFINITION
                    * ========================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Carousel <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
    <span class="k">this</span>.$indicators <span class="o">=</span> <span class="k">this</span>.$element.find(<span class="s1">'.carousel-indicators'</span>)
    <span class="k">this</span>.options <span class="o">=</span> options
    <span class="k">this</span>.options.pause <span class="o">==</span> <span class="s1">'hover'</span> <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element
      .on(<span class="s1">'mouseenter'</span>, $.proxy(<span class="k">this</span>.pause, <span class="k">this</span>))
      .on(<span class="s1">'mouseleave'</span>, $.proxy(<span class="k">this</span>.cycle, <span class="k">this</span>))
  }

  Carousel.prototype <span class="o">=</span> {

    cycle<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">if</span> (<span class="o">!</span>e) <span class="k">this</span>.paused <span class="o">=</span> <span class="kc">false</span>
      <span class="k">if</span> (<span class="k">this</span>.interval) clearInterval(<span class="k">this</span>.interval);
      <span class="k">this</span>.options.interval
        <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">this</span>.paused
        <span class="o">&amp;&amp;</span> (<span class="k">this</span>.interval <span class="o">=</span> setInterval($.proxy(<span class="k">this</span>.next, <span class="k">this</span>), <span class="k">this</span>.options.interval))
      <span class="k">return</span> <span class="k">this</span>
    }

  , getActiveIndex<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.$active <span class="o">=</span> <span class="k">this</span>.$element.find(<span class="s1">'.item.active'</span>)
      <span class="k">this</span>.$items <span class="o">=</span> <span class="k">this</span>.$active.parent().children()
      <span class="k">return</span> <span class="k">this</span>.$items.index(<span class="k">this</span>.$active)
    }

  , to<span class="o">:</span> <span class="kd">function</span> (pos) {
      <span class="kd">var</span> activeIndex <span class="o">=</span> <span class="k">this</span>.getActiveIndex()
        , that <span class="o">=</span> <span class="k">this</span>

      <span class="k">if</span> (pos <span class="o">&gt;</span> (<span class="k">this</span>.$items.length <span class="o">-</span> <span class="mi">1</span>) <span class="o">||</span> pos <span class="o">&lt;</span> <span class="mi">0</span>) <span class="k">return</span>

      <span class="k">if</span> (<span class="k">this</span>.sliding) {
        <span class="k">return</span> <span class="k">this</span>.$element.one(<span class="s1">'slid'</span>, <span class="kd">function</span> () {
          that.to(pos)
        })
      }

      <span class="k">if</span> (activeIndex <span class="o">==</span> pos) {
        <span class="k">return</span> <span class="k">this</span>.pause().cycle()
      }

      <span class="k">return</span> <span class="k">this</span>.slide(pos <span class="o">&gt;</span> activeIndex <span class="o">?</span> <span class="s1">'next'</span> <span class="o">:</span> <span class="s1">'prev'</span>, $(<span class="k">this</span>.$items[pos]))
    }

  , pause<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">if</span> (<span class="o">!</span>e) <span class="k">this</span>.paused <span class="o">=</span> <span class="kc">true</span>
      <span class="k">if</span> (<span class="k">this</span>.$element.find(<span class="s1">'.next, .prev'</span>).length <span class="o">&amp;&amp;</span> $.support.transition.end) {
        <span class="k">this</span>.$element.trigger($.support.transition.end)
        <span class="k">this</span>.cycle(<span class="kc">true</span>)
      }
      clearInterval(<span class="k">this</span>.interval)
      <span class="k">this</span>.interval <span class="o">=</span> <span class="kc">null</span>
      <span class="k">return</span> <span class="k">this</span>
    }

  , next<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">if</span> (<span class="k">this</span>.sliding) <span class="k">return</span>
      <span class="k">return</span> <span class="k">this</span>.slide(<span class="s1">'next'</span>)
    }

  , prev<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">if</span> (<span class="k">this</span>.sliding) <span class="k">return</span>
      <span class="k">return</span> <span class="k">this</span>.slide(<span class="s1">'prev'</span>)
    }

  , slide<span class="o">:</span> <span class="kd">function</span> (type, next) {
      <span class="kd">var</span> $active <span class="o">=</span> <span class="k">this</span>.$element.find(<span class="s1">'.item.active'</span>)
        , $next <span class="o">=</span> next <span class="o">||</span> $active[type]()
        , isCycling <span class="o">=</span> <span class="k">this</span>.interval
        , direction <span class="o">=</span> type <span class="o">==</span> <span class="s1">'next'</span> <span class="o">?</span> <span class="s1">'left'</span> <span class="o">:</span> <span class="s1">'right'</span>
        , fallback  <span class="o">=</span> type <span class="o">==</span> <span class="s1">'next'</span> <span class="o">?</span> <span class="s1">'first'</span> <span class="o">:</span> <span class="s1">'last'</span>
        , that <span class="o">=</span> <span class="k">this</span>
        , e

      <span class="k">this</span>.sliding <span class="o">=</span> <span class="kc">true</span>

      isCycling <span class="o">&amp;&amp;</span> <span class="k">this</span>.pause()

      $next <span class="o">=</span> $next.length <span class="o">?</span> $next <span class="o">:</span> <span class="k">this</span>.$element.find(<span class="s1">'.item'</span>)[fallback]()

      e <span class="o">=</span> $.Event(<span class="s1">'slide'</span>, {
        relatedTarget<span class="o">:</span> $next[<span class="mi">0</span>]
      , direction<span class="o">:</span> direction
      })

      <span class="k">if</span> ($next.hasClass(<span class="s1">'active'</span>)) <span class="k">return</span>

      <span class="k">if</span> (<span class="k">this</span>.$indicators.length) {
        <span class="k">this</span>.$indicators.find(<span class="s1">'.active'</span>).removeClass(<span class="s1">'active'</span>)
        <span class="k">this</span>.$element.one(<span class="s1">'slid'</span>, <span class="kd">function</span> () {
          <span class="kd">var</span> $nextIndicator <span class="o">=</span> $(that.$indicators.children()[that.getActiveIndex()])
          $nextIndicator <span class="o">&amp;&amp;</span> $nextIndicator.addClass(<span class="s1">'active'</span>)
        })
      }

      <span class="k">if</span> ($.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'slide'</span>)) {
        <span class="k">this</span>.$element.trigger(e)
        <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>
        $next.addClass(type)
        $next[<span class="mi">0</span>].offsetWidth <span class="c1">// force reflow
</span>        $active.addClass(direction)
        $next.addClass(direction)
        <span class="k">this</span>.$element.one($.support.transition.end, <span class="kd">function</span> () {
          $next.removeClass([type, direction].join(<span class="s1">' '</span>)).addClass(<span class="s1">'active'</span>)
          $active.removeClass([<span class="s1">'active'</span>, direction].join(<span class="s1">' '</span>))
          that.sliding <span class="o">=</span> <span class="kc">false</span>
          setTimeout(<span class="kd">function</span> () { that.$element.trigger(<span class="s1">'slid'</span>) }, <span class="mi">0</span>)
        })
      } <span class="k">else</span> {
        <span class="k">this</span>.$element.trigger(e)
        <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>
        $active.removeClass(<span class="s1">'active'</span>)
        $next.addClass(<span class="s1">'active'</span>)
        <span class="k">this</span>.sliding <span class="o">=</span> <span class="kc">false</span>
        <span class="k">this</span>.$element.trigger(<span class="s1">'slid'</span>)
      }

      isCycling <span class="o">&amp;&amp;</span> <span class="k">this</span>.cycle()

      <span class="k">return</span> <span class="k">this</span>
    }

  }
</pre></td>
              </tr>
              <tr id="line-331">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-331">
                      331
                      ¶
                    </a>
                  </div>
                  <p>CAROUSEL PLUGIN DEFINITION
                    * ========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.carousel

  $.fn.carousel <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'carousel'</span>)
        , options <span class="o">=</span> $.extend({}, $.fn.carousel.defaults, <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option)
        , action <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span> <span class="o">?</span> option <span class="o">:</span> options.slide
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'carousel'</span>, (data <span class="o">=</span> <span class="k">new</span> Carousel(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'number'</span>) data.to(option)
      <span class="k">else</span> <span class="k">if</span> (action) data[action]()
      <span class="k">else</span> <span class="k">if</span> (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.defaults <span class="o">=</span> {
    interval<span class="o">:</span> <span class="mi">5000</span>
  , pause<span class="o">:</span> <span class="s1">'hover'</span>
  }

  $.fn.carousel.Constructor <span class="o">=</span> Carousel
</pre></td>
              </tr>
              <tr id="line-356">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-356">
                      356
                      ¶
                    </a>
                  </div>
                  <p>CAROUSEL NO CONFLICT
                    * ==================== */</p>
                </td>
                <td class="code"><pre>  $.fn.carousel.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.carousel <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }</pre></td>
              </tr>
              <tr id="line-363">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-363">
                      363
                      ¶
                    </a>
                  </div>
                  <p>CAROUSEL DATA-API
                    * ================= */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.carousel.data-api'</span>, <span class="s1">'[data-slide], [data-slide-to]'</span>, <span class="kd">function</span> (e) {
    <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>), href
      , $target <span class="o">=</span> $($this.attr(<span class="s1">'data-target'</span>) <span class="o">||</span> (href <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)) <span class="o">&amp;&amp;</span> href.replace(<span class="sr">/.*(?=#[^\s]+$)/</span>, <span class="s1">''</span>)) <span class="c1">//strip for ie7
</span>      , options <span class="o">=</span> $.extend({}, $target.data(), $this.data())
      , slideIndex

    $target.carousel(options)

    <span class="k">if</span> (slideIndex <span class="o">=</span> $this.attr(<span class="s1">'data-slide-to'</span>)) {
      $target.data(<span class="s1">'carousel'</span>).pause().to(slideIndex).cycle()
    }

    e.preventDefault()
  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* =============================================================
 * bootstrap-collapse.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#collapse
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-386">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-386">
                      386
                      ¶
                    </a>
                  </div>
                  <p>COLLAPSE PUBLIC CLASS DEFINITION
                    * ================================ */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Collapse <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
    <span class="k">this</span>.options <span class="o">=</span> $.extend({}, $.fn.collapse.defaults, options)

    <span class="k">if</span> (<span class="k">this</span>.options.parent) {
      <span class="k">this</span>.$parent <span class="o">=</span> $(<span class="k">this</span>.options.parent)
    }

    <span class="k">this</span>.options.toggle <span class="o">&amp;&amp;</span> <span class="k">this</span>.toggle()
  }

  Collapse.prototype <span class="o">=</span> {

    constructor<span class="o">:</span> Collapse

  , dimension<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> hasWidth <span class="o">=</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'width'</span>)
      <span class="k">return</span> hasWidth <span class="o">?</span> <span class="s1">'width'</span> <span class="o">:</span> <span class="s1">'height'</span>
    }

  , show<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> dimension
        , scroll
        , actives
        , hasData

      <span class="k">if</span> (<span class="k">this</span>.transitioning <span class="o">||</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'in'</span>)) <span class="k">return</span>

      dimension <span class="o">=</span> <span class="k">this</span>.dimension()
      scroll <span class="o">=</span> $.camelCase([<span class="s1">'scroll'</span>, dimension].join(<span class="s1">'-'</span>))
      actives <span class="o">=</span> <span class="k">this</span>.$parent <span class="o">&amp;&amp;</span> <span class="k">this</span>.$parent.find(<span class="s1">'&gt; .accordion-group &gt; .in'</span>)

      <span class="k">if</span> (actives <span class="o">&amp;&amp;</span> actives.length) {
        hasData <span class="o">=</span> actives.data(<span class="s1">'collapse'</span>)
        <span class="k">if</span> (hasData <span class="o">&amp;&amp;</span> hasData.transitioning) <span class="k">return</span>
        actives.collapse(<span class="s1">'hide'</span>)
        hasData <span class="o">||</span> actives.data(<span class="s1">'collapse'</span>, <span class="kc">null</span>)
      }

      <span class="k">this</span>.$element[dimension](<span class="mi">0</span>)
      <span class="k">this</span>.transition(<span class="s1">'addClass'</span>, $.Event(<span class="s1">'show'</span>), <span class="s1">'shown'</span>)
      $.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element[dimension](<span class="k">this</span>.$element[<span class="mi">0</span>][scroll])
    }

  , hide<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> dimension
      <span class="k">if</span> (<span class="k">this</span>.transitioning <span class="o">||</span> <span class="o">!</span><span class="k">this</span>.$element.hasClass(<span class="s1">'in'</span>)) <span class="k">return</span>
      dimension <span class="o">=</span> <span class="k">this</span>.dimension()
      <span class="k">this</span>.reset(<span class="k">this</span>.$element[dimension]())
      <span class="k">this</span>.transition(<span class="s1">'removeClass'</span>, $.Event(<span class="s1">'hide'</span>), <span class="s1">'hidden'</span>)
      <span class="k">this</span>.$element[dimension](<span class="mi">0</span>)
    }

  , reset<span class="o">:</span> <span class="kd">function</span> (size) {
      <span class="kd">var</span> dimension <span class="o">=</span> <span class="k">this</span>.dimension()

      <span class="k">this</span>.$element
        .removeClass(<span class="s1">'collapse'</span>)
        [dimension](size <span class="o">||</span> <span class="s1">'auto'</span>)
        [<span class="mi">0</span>].offsetWidth

      <span class="k">this</span>.$element[size <span class="o">!==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s1">'addClass'</span> <span class="o">:</span> <span class="s1">'removeClass'</span>](<span class="s1">'collapse'</span>)

      <span class="k">return</span> <span class="k">this</span>
    }

  , transition<span class="o">:</span> <span class="kd">function</span> (method, startEvent, completeEvent) {
      <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
        , complete <span class="o">=</span> <span class="kd">function</span> () {
            <span class="k">if</span> (startEvent.type <span class="o">==</span> <span class="s1">'show'</span>) that.reset()
            that.transitioning <span class="o">=</span> <span class="mi">0</span>
            that.$element.trigger(completeEvent)
          }

      <span class="k">this</span>.$element.trigger(startEvent)

      <span class="k">if</span> (startEvent.isDefaultPrevented()) <span class="k">return</span>

      <span class="k">this</span>.transitioning <span class="o">=</span> <span class="mi">1</span>

      <span class="k">this</span>.$element[method](<span class="s1">'in'</span>)

      $.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'collapse'</span>) <span class="o">?</span>
        <span class="k">this</span>.$element.one($.support.transition.end, complete) <span class="o">:</span>
        complete()
    }

  , toggle<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>[<span class="k">this</span>.$element.hasClass(<span class="s1">'in'</span>) <span class="o">?</span> <span class="s1">'hide'</span> <span class="o">:</span> <span class="s1">'show'</span>]()
    }

  }
</pre></td>
              </tr>
              <tr id="line-482">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-482">
                      482
                      ¶
                    </a>
                  </div>
                  <p>COLLAPSE PLUGIN DEFINITION
                    * ========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.collapse

  $.fn.collapse <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'collapse'</span>)
        , options <span class="o">=</span> $.extend({}, $.fn.collapse.defaults, $this.data(), <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option)
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'collapse'</span>, (data <span class="o">=</span> <span class="k">new</span> Collapse(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.collapse.defaults <span class="o">=</span> {
    toggle<span class="o">:</span> <span class="kc">true</span>
  }

  $.fn.collapse.Constructor <span class="o">=</span> Collapse
</pre></td>
              </tr>
              <tr id="line-503">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-503">
                      503
                      ¶
                    </a>
                  </div>
                  <p>COLLAPSE NO CONFLICT
                    * ==================== */</p>
                </td>
                <td class="code"><pre>  $.fn.collapse.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.collapse <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-511">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-511">
                      511
                      ¶
                    </a>
                  </div>
                  <p>COLLAPSE DATA-API
                    * ================= */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.collapse.data-api'</span>, <span class="s1">'[data-toggle=collapse]'</span>, <span class="kd">function</span> (e) {
    <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>), href
      , target <span class="o">=</span> $this.attr(<span class="s1">'data-target'</span>)
        <span class="o">||</span> e.preventDefault()
        <span class="o">||</span> (href <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)) <span class="o">&amp;&amp;</span> href.replace(<span class="sr">/.*(?=#[^\s]+$)/</span>, <span class="s1">''</span>) <span class="c1">//strip for ie7
</span>      , option <span class="o">=</span> $(target).data(<span class="s1">'collapse'</span>) <span class="o">?</span> <span class="s1">'toggle'</span> <span class="o">:</span> $this.data()
    $this[$(target).hasClass(<span class="s1">'in'</span>) <span class="o">?</span> <span class="s1">'addClass'</span> <span class="o">:</span> <span class="s1">'removeClass'</span>](<span class="s1">'collapsed'</span>)
    $(target).collapse(option)
  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* ============================================================
 * bootstrap-dropdown.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-529">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-529">
                      529
                      ¶
                    </a>
                  </div>
                  <p>DROPDOWN CLASS DEFINITION
                    * ========================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> toggle <span class="o">=</span> <span class="s1">'[data-toggle=dropdown]'</span>
    , Dropdown <span class="o">=</span> <span class="kd">function</span> (element) {
        <span class="kd">var</span> $el <span class="o">=</span> $(element).on(<span class="s1">'click.dropdown.data-api'</span>, <span class="k">this</span>.toggle)
        $(<span class="s1">'html'</span>).on(<span class="s1">'click.dropdown.data-api'</span>, <span class="kd">function</span> () {
          $el.parent().removeClass(<span class="s1">'open'</span>)
        })
      }

  Dropdown.prototype <span class="o">=</span> {

    constructor<span class="o">:</span> Dropdown

  , toggle<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , $parent
        , isActive

      <span class="k">if</span> ($this.is(<span class="s1">'.disabled, :disabled'</span>)) <span class="k">return</span>

      $parent <span class="o">=</span> getParent($this)

      isActive <span class="o">=</span> $parent.hasClass(<span class="s1">'open'</span>)

      clearMenus()

      <span class="k">if</span> (<span class="o">!</span>isActive) {
        $parent.toggleClass(<span class="s1">'open'</span>)
      }

      $this.focus()

      <span class="k">return</span> <span class="kc">false</span>
    }

  , keydown<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="kd">var</span> $this
        , $items
        , $active
        , $parent
        , isActive
        , index

      <span class="k">if</span> (<span class="o">!</span><span class="sr">/(38|40|27)/</span>.test(e.keyCode)) <span class="k">return</span>

      $this <span class="o">=</span> $(<span class="k">this</span>)

      e.preventDefault()
      e.stopPropagation()

      <span class="k">if</span> ($this.is(<span class="s1">'.disabled, :disabled'</span>)) <span class="k">return</span>

      $parent <span class="o">=</span> getParent($this)

      isActive <span class="o">=</span> $parent.hasClass(<span class="s1">'open'</span>)

      <span class="k">if</span> (<span class="o">!</span>isActive <span class="o">||</span> (isActive <span class="o">&amp;&amp;</span> e.keyCode <span class="o">==</span> <span class="mi">27</span>)) {
        <span class="k">if</span> (e.which <span class="o">==</span> <span class="mi">27</span>) $parent.find(toggle).focus()
        <span class="k">return</span> $this.click()
      }

      $items <span class="o">=</span> $(<span class="s1">'[role=menu] li:not(.divider):visible a'</span>, $parent)

      <span class="k">if</span> (<span class="o">!</span>$items.length) <span class="k">return</span>

      index <span class="o">=</span> $items.index($items.filter(<span class="s1">':focus'</span>))

      <span class="k">if</span> (e.keyCode <span class="o">==</span> <span class="mi">38</span> <span class="o">&amp;&amp;</span> index <span class="o">&gt;</span> <span class="mi">0</span>) index<span class="o">--</span>                                        <span class="c1">// up
</span>      <span class="k">if</span> (e.keyCode <span class="o">==</span> <span class="mi">40</span> <span class="o">&amp;&amp;</span> index <span class="o">&lt;</span> $items.length <span class="o">-</span> <span class="mi">1</span>) index<span class="o">++</span>                        <span class="c1">// down
</span>      <span class="k">if</span> (<span class="o">!</span><span class="o">~</span>index) index <span class="o">=</span> <span class="mi">0</span>

      $items
        .eq(index)
        .focus()
    }

  }

  <span class="kd">function</span> clearMenus() {
    $(toggle).each(<span class="kd">function</span> () {
      getParent($(<span class="k">this</span>)).removeClass(<span class="s1">'open'</span>)
    })
  }

  <span class="kd">function</span> getParent($this) {
    <span class="kd">var</span> selector <span class="o">=</span> $this.attr(<span class="s1">'data-target'</span>)
      , $parent

    <span class="k">if</span> (<span class="o">!</span>selector) {
      selector <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)
      selector <span class="o">=</span> selector <span class="o">&amp;&amp;</span> <span class="sr">/#/</span>.test(selector) <span class="o">&amp;&amp;</span> selector.replace(<span class="sr">/.*(?=#[^\s]*$)/</span>, <span class="s1">''</span>) <span class="c1">//strip for ie7
</span>    }

    $parent <span class="o">=</span> selector <span class="o">&amp;&amp;</span> $(selector)

    <span class="k">if</span> (<span class="o">!</span>$parent <span class="o">||</span> <span class="o">!</span>$parent.length) $parent <span class="o">=</span> $this.parent()

    <span class="k">return</span> $parent
  }
</pre></td>
              </tr>
              <tr id="line-628">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-628">
                      628
                      ¶
                    </a>
                  </div>
                  <p>DROPDOWN PLUGIN DEFINITION
                     * ========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.dropdown

  $.fn.dropdown <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'dropdown'</span>)
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'dropdown'</span>, (data <span class="o">=</span> <span class="k">new</span> Dropdown(<span class="k">this</span>)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor <span class="o">=</span> Dropdown
</pre></td>
              </tr>
              <tr id="line-644">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-644">
                      644
                      ¶
                    </a>
                  </div>
                  <p>DROPDOWN NO CONFLICT
                    * ==================== */</p>
                </td>
                <td class="code"><pre>  $.fn.dropdown.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.dropdown <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-652">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-652">
                      652
                      ¶
                    </a>
                  </div>
                  <p>APPLY TO STANDARD DROPDOWN ELEMENTS
                     * =================================== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>)
    .on(<span class="s1">'click.dropdown.data-api'</span>, clearMenus)
    .on(<span class="s1">'click.dropdown.data-api'</span>, <span class="s1">'.dropdown form'</span>, <span class="kd">function</span> (e) { e.stopPropagation() })
    .on(<span class="s1">'click.dropdown-menu'</span>, <span class="kd">function</span> (e) { e.stopPropagation() })
    .on(<span class="s1">'click.dropdown.data-api'</span>  , toggle, Dropdown.prototype.toggle)
    .on(<span class="s1">'keydown.dropdown.data-api'</span>, toggle <span class="o">+</span> <span class="s1">', [role=menu]'</span> , Dropdown.prototype.keydown)

}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
              <tr id="line-662">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-662">
                      662
                      ¶
                    </a>
                  </div>
                  <p>=========================================================
                   * bootstrap-modal.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#modals
                   * =========================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * ========================================================= */</p>
                </td>
              </tr>
              <tr id="line-665">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-665">
                      665
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-669">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-669">
                      669
                      ¶
                    </a>
                  </div>
                  <p>MODAL CLASS DEFINITION
                    * ====================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Modal <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.options <span class="o">=</span> options
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
      .delegate(<span class="s1">'[data-dismiss="modal"]'</span>, <span class="s1">'click.dismiss.modal'</span>, $.proxy(<span class="k">this</span>.hide, <span class="k">this</span>))
    <span class="k">this</span>.options.remote <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element.find(<span class="s1">'.modal-body'</span>).load(<span class="k">this</span>.options.remote)
  }

  Modal.prototype <span class="o">=</span> {

      constructor<span class="o">:</span> Modal

    , toggle<span class="o">:</span> <span class="kd">function</span> () {
        <span class="k">return</span> <span class="k">this</span>[<span class="o">!</span><span class="k">this</span>.isShown <span class="o">?</span> <span class="s1">'show'</span> <span class="o">:</span> <span class="s1">'hide'</span>]()
      }

    , show<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
          , e <span class="o">=</span> $.Event(<span class="s1">'show'</span>)

        <span class="k">this</span>.$element.trigger(e)

        <span class="k">if</span> (<span class="k">this</span>.isShown <span class="o">||</span> e.isDefaultPrevented()) <span class="k">return</span>

        <span class="k">this</span>.isShown <span class="o">=</span> <span class="kc">true</span>

        <span class="k">this</span>.escape()

        <span class="k">this</span>.backdrop(<span class="kd">function</span> () {
          <span class="kd">var</span> transition <span class="o">=</span> $.support.transition <span class="o">&amp;&amp;</span> that.$element.hasClass(<span class="s1">'fade'</span>)

          <span class="k">if</span> (<span class="o">!</span>that.$element.parent().length) {
            that.$element.appendTo(<span class="nb">document</span>.body) <span class="c1">//don't move modals dom position
</span>          }

          that.$element.show()

          <span class="k">if</span> (transition) {
            that.$element[<span class="mi">0</span>].offsetWidth <span class="c1">// force reflow
</span>          }

          that.$element
            .addClass(<span class="s1">'in'</span>)
            .attr(<span class="s1">'aria-hidden'</span>, <span class="kc">false</span>)

          that.enforceFocus()

          transition <span class="o">?</span>
            that.$element.one($.support.transition.end, <span class="kd">function</span> () { that.$element.focus().trigger(<span class="s1">'shown'</span>) }) <span class="o">:</span>
            that.$element.focus().trigger(<span class="s1">'shown'</span>)

        })
      }

    , hide<span class="o">:</span> <span class="kd">function</span> (e) {
        e <span class="o">&amp;&amp;</span> e.preventDefault()

        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>

        e <span class="o">=</span> $.Event(<span class="s1">'hide'</span>)

        <span class="k">this</span>.$element.trigger(e)

        <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.isShown <span class="o">||</span> e.isDefaultPrevented()) <span class="k">return</span>

        <span class="k">this</span>.isShown <span class="o">=</span> <span class="kc">false</span>

        <span class="k">this</span>.escape()

        $(<span class="nb">document</span>).off(<span class="s1">'focusin.modal'</span>)

        <span class="k">this</span>.$element
          .removeClass(<span class="s1">'in'</span>)
          .attr(<span class="s1">'aria-hidden'</span>, <span class="kc">true</span>)

        $.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'fade'</span>) <span class="o">?</span>
          <span class="k">this</span>.hideWithTransition() <span class="o">:</span>
          <span class="k">this</span>.hideModal()
      }

    , enforceFocus<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
        $(<span class="nb">document</span>).on(<span class="s1">'focusin.modal'</span>, <span class="kd">function</span> (e) {
          <span class="k">if</span> (that.$element[<span class="mi">0</span>] <span class="o">!==</span> e.target <span class="o">&amp;&amp;</span> <span class="o">!</span>that.$element.has(e.target).length) {
            that.$element.focus()
          }
        })
      }

    , escape<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
        <span class="k">if</span> (<span class="k">this</span>.isShown <span class="o">&amp;&amp;</span> <span class="k">this</span>.options.keyboard) {
          <span class="k">this</span>.$element.on(<span class="s1">'keyup.dismiss.modal'</span>, <span class="kd">function</span> ( e ) {
            e.which <span class="o">==</span> <span class="mi">27</span> <span class="o">&amp;&amp;</span> that.hide()
          })
        } <span class="k">else</span> <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.isShown) {
          <span class="k">this</span>.$element.off(<span class="s1">'keyup.dismiss.modal'</span>)
        }
      }

    , hideWithTransition<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
          , timeout <span class="o">=</span> setTimeout(<span class="kd">function</span> () {
              that.$element.off($.support.transition.end)
              that.hideModal()
            }, <span class="mi">500</span>)

        <span class="k">this</span>.$element.one($.support.transition.end, <span class="kd">function</span> () {
          clearTimeout(timeout)
          that.hideModal()
        })
      }

    , hideModal<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
        <span class="k">this</span>.$element.hide()
        <span class="k">this</span>.backdrop(<span class="kd">function</span> () {
          that.removeBackdrop()
          that.$element.trigger(<span class="s1">'hidden'</span>)
        })
      }

    , removeBackdrop<span class="o">:</span> <span class="kd">function</span> () {
        <span class="k">this</span>.$backdrop <span class="o">&amp;&amp;</span> <span class="k">this</span>.$backdrop.remove()
        <span class="k">this</span>.$backdrop <span class="o">=</span> <span class="kc">null</span>
      }

    , backdrop<span class="o">:</span> <span class="kd">function</span> (callback) {
        <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
          , animate <span class="o">=</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'fade'</span>) <span class="o">?</span> <span class="s1">'fade'</span> <span class="o">:</span> <span class="s1">''</span>

        <span class="k">if</span> (<span class="k">this</span>.isShown <span class="o">&amp;&amp;</span> <span class="k">this</span>.options.backdrop) {
          <span class="kd">var</span> doAnimate <span class="o">=</span> $.support.transition <span class="o">&amp;&amp;</span> animate

          <span class="k">this</span>.$backdrop <span class="o">=</span> $(<span class="s1">'&lt;div class="modal-backdrop '</span> <span class="o">+</span> animate <span class="o">+</span> <span class="s1">'" /&gt;'</span>)
            .appendTo(<span class="nb">document</span>.body)

          <span class="k">this</span>.$backdrop.click(
            <span class="k">this</span>.options.backdrop <span class="o">==</span> <span class="s1">'static'</span> <span class="o">?</span>
              $.proxy(<span class="k">this</span>.$element[<span class="mi">0</span>].focus, <span class="k">this</span>.$element[<span class="mi">0</span>])
            <span class="o">:</span> $.proxy(<span class="k">this</span>.hide, <span class="k">this</span>)
          )

          <span class="k">if</span> (doAnimate) <span class="k">this</span>.$backdrop[<span class="mi">0</span>].offsetWidth <span class="c1">// force reflow
</span>
          <span class="k">this</span>.$backdrop.addClass(<span class="s1">'in'</span>)

          <span class="k">if</span> (<span class="o">!</span>callback) <span class="k">return</span>

          doAnimate <span class="o">?</span>
            <span class="k">this</span>.$backdrop.one($.support.transition.end, callback) <span class="o">:</span>
            callback()

        } <span class="k">else</span> <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.isShown <span class="o">&amp;&amp;</span> <span class="k">this</span>.$backdrop) {
          <span class="k">this</span>.$backdrop.removeClass(<span class="s1">'in'</span>)

          $.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$element.hasClass(<span class="s1">'fade'</span>)<span class="o">?</span>
            <span class="k">this</span>.$backdrop.one($.support.transition.end, callback) <span class="o">:</span>
            callback()

        } <span class="k">else</span> <span class="k">if</span> (callback) {
          callback()
        }
      }
  }
</pre></td>
              </tr>
              <tr id="line-834">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-834">
                      834
                      ¶
                    </a>
                  </div>
                  <p>MODAL PLUGIN DEFINITION
                    * ======================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.modal

  $.fn.modal <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'modal'</span>)
        , options <span class="o">=</span> $.extend({}, $.fn.modal.defaults, $this.data(), <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option)
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'modal'</span>, (data <span class="o">=</span> <span class="k">new</span> Modal(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
      <span class="k">else</span> <span class="k">if</span> (options.show) data.show()
    })
  }

  $.fn.modal.defaults <span class="o">=</span> {
      backdrop<span class="o">:</span> <span class="kc">true</span>
    , keyboard<span class="o">:</span> <span class="kc">true</span>
    , show<span class="o">:</span> <span class="kc">true</span>
  }

  $.fn.modal.Constructor <span class="o">=</span> Modal
</pre></td>
              </tr>
              <tr id="line-858">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-858">
                      858
                      ¶
                    </a>
                  </div>
                  <p>MODAL NO CONFLICT
                    * ================= */</p>
                </td>
                <td class="code"><pre>  $.fn.modal.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.modal <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-866">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-866">
                      866
                      ¶
                    </a>
                  </div>
                  <p>MODAL DATA-API
                    * ============== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.modal.data-api'</span>, <span class="s1">'[data-toggle="modal"]'</span>, <span class="kd">function</span> (e) {
    <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
      , href <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)
      , $target <span class="o">=</span> $($this.attr(<span class="s1">'data-target'</span>) <span class="o">||</span> (href <span class="o">&amp;&amp;</span> href.replace(<span class="sr">/.*(?=#[^\s]+$)/</span>, <span class="s1">''</span>))) <span class="c1">//strip for ie7
</span>      , option <span class="o">=</span> $target.data(<span class="s1">'modal'</span>) <span class="o">?</span> <span class="s1">'toggle'</span> <span class="o">:</span> $.extend({ remote<span class="o">:</span><span class="o">!</span><span class="sr">/#/</span>.test(href) <span class="o">&amp;&amp;</span> href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option)
      .one(<span class="s1">'hide'</span>, <span class="kd">function</span> () {
        $this.focus()
      })
  })

}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
              <tr id="line-883">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-883">
                      883
                      ¶
                    </a>
                  </div>
                  <p>===========================================================
                   * bootstrap-tooltip.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#tooltips
                   * Inspired by the original jQuery.tipsy by Jason Frame
                   * ===========================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * ========================================================== */</p>
                </td>
              </tr>
              <tr id="line-886">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-886">
                      886
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-890">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-890">
                      890
                      ¶
                    </a>
                  </div>
                  <p>TOOLTIP PUBLIC CLASS DEFINITION
                    * =============================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Tooltip <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.init(<span class="s1">'tooltip'</span>, element, options)
  }

  Tooltip.prototype <span class="o">=</span> {

    constructor<span class="o">:</span> Tooltip

  , init<span class="o">:</span> <span class="kd">function</span> (type, element, options) {
      <span class="kd">var</span> eventIn
        , eventOut
        , triggers
        , trigger
        , i

      <span class="k">this</span>.type <span class="o">=</span> type
      <span class="k">this</span>.$element <span class="o">=</span> $(element)
      <span class="k">this</span>.options <span class="o">=</span> <span class="k">this</span>.getOptions(options)
      <span class="k">this</span>.enabled <span class="o">=</span> <span class="kc">true</span>

      triggers <span class="o">=</span> <span class="k">this</span>.options.trigger.split(<span class="s1">' '</span>)

      <span class="k">for</span> (i <span class="o">=</span> triggers.length; i<span class="o">--</span>;) {
        trigger <span class="o">=</span> triggers[i]
        <span class="k">if</span> (trigger <span class="o">==</span> <span class="s1">'click'</span>) {
          <span class="k">this</span>.$element.on(<span class="s1">'click.'</span> <span class="o">+</span> <span class="k">this</span>.type, <span class="k">this</span>.options.selector, $.proxy(<span class="k">this</span>.toggle, <span class="k">this</span>))
        } <span class="k">else</span> <span class="k">if</span> (trigger <span class="o">!=</span> <span class="s1">'manual'</span>) {
          eventIn <span class="o">=</span> trigger <span class="o">==</span> <span class="s1">'hover'</span> <span class="o">?</span> <span class="s1">'mouseenter'</span> <span class="o">:</span> <span class="s1">'focus'</span>
          eventOut <span class="o">=</span> trigger <span class="o">==</span> <span class="s1">'hover'</span> <span class="o">?</span> <span class="s1">'mouseleave'</span> <span class="o">:</span> <span class="s1">'blur'</span>
          <span class="k">this</span>.$element.on(eventIn <span class="o">+</span> <span class="s1">'.'</span> <span class="o">+</span> <span class="k">this</span>.type, <span class="k">this</span>.options.selector, $.proxy(<span class="k">this</span>.enter, <span class="k">this</span>))
          <span class="k">this</span>.$element.on(eventOut <span class="o">+</span> <span class="s1">'.'</span> <span class="o">+</span> <span class="k">this</span>.type, <span class="k">this</span>.options.selector, $.proxy(<span class="k">this</span>.leave, <span class="k">this</span>))
        }
      }

      <span class="k">this</span>.options.selector <span class="o">?</span>
        (<span class="k">this</span>._options <span class="o">=</span> $.extend({}, <span class="k">this</span>.options, { trigger<span class="o">:</span> <span class="s1">'manual'</span>, selector<span class="o">:</span> <span class="s1">''</span> })) <span class="o">:</span>
        <span class="k">this</span>.fixTitle()
    }

  , getOptions<span class="o">:</span> <span class="kd">function</span> (options) {
      options <span class="o">=</span> $.extend({}, $.fn[<span class="k">this</span>.type].defaults, <span class="k">this</span>.$element.data(), options)

      <span class="k">if</span> (options.delay <span class="o">&amp;&amp;</span> <span class="k">typeof</span> options.delay <span class="o">==</span> <span class="s1">'number'</span>) {
        options.delay <span class="o">=</span> {
          show<span class="o">:</span> options.delay
        , hide<span class="o">:</span> options.delay
        }
      }

      <span class="k">return</span> options
    }

  , enter<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="kd">var</span> defaults <span class="o">=</span> $.fn[<span class="k">this</span>.type].defaults
        , options <span class="o">=</span> {}
        , self

      <span class="k">this</span>._options <span class="o">&amp;&amp;</span> $.each(<span class="k">this</span>._options, <span class="kd">function</span> (key, value) {
        <span class="k">if</span> (defaults[key] <span class="o">!=</span> value) options[key] <span class="o">=</span> value
      }, <span class="k">this</span>)

      self <span class="o">=</span> $(e.currentTarget)[<span class="k">this</span>.type](options).data(<span class="k">this</span>.type)

      <span class="k">if</span> (<span class="o">!</span>self.options.delay <span class="o">||</span> <span class="o">!</span>self.options.delay.show) <span class="k">return</span> self.show()

      clearTimeout(<span class="k">this</span>.timeout)
      self.hoverState <span class="o">=</span> <span class="s1">'in'</span>
      <span class="k">this</span>.timeout <span class="o">=</span> setTimeout(<span class="kd">function</span>() {
        <span class="k">if</span> (self.hoverState <span class="o">==</span> <span class="s1">'in'</span>) self.show()
      }, self.options.delay.show)
    }

  , leave<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="kd">var</span> self <span class="o">=</span> $(e.currentTarget)[<span class="k">this</span>.type](<span class="k">this</span>._options).data(<span class="k">this</span>.type)

      <span class="k">if</span> (<span class="k">this</span>.timeout) clearTimeout(<span class="k">this</span>.timeout)
      <span class="k">if</span> (<span class="o">!</span>self.options.delay <span class="o">||</span> <span class="o">!</span>self.options.delay.hide) <span class="k">return</span> self.hide()

      self.hoverState <span class="o">=</span> <span class="s1">'out'</span>
      <span class="k">this</span>.timeout <span class="o">=</span> setTimeout(<span class="kd">function</span>() {
        <span class="k">if</span> (self.hoverState <span class="o">==</span> <span class="s1">'out'</span>) self.hide()
      }, self.options.delay.hide)
    }

  , show<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> $tip
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp
        , e <span class="o">=</span> $.Event(<span class="s1">'show'</span>)

      <span class="k">if</span> (<span class="k">this</span>.hasContent() <span class="o">&amp;&amp;</span> <span class="k">this</span>.enabled) {
        <span class="k">this</span>.$element.trigger(e)
        <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>
        $tip <span class="o">=</span> <span class="k">this</span>.tip()
        <span class="k">this</span>.setContent()

        <span class="k">if</span> (<span class="k">this</span>.options.animation) {
          $tip.addClass(<span class="s1">'fade'</span>)
        }

        placement <span class="o">=</span> <span class="k">typeof</span> <span class="k">this</span>.options.placement <span class="o">==</span> <span class="s1">'function'</span> <span class="o">?</span>
          <span class="k">this</span>.options.placement.call(<span class="k">this</span>, $tip[<span class="mi">0</span>], <span class="k">this</span>.$element[<span class="mi">0</span>]) <span class="o">:</span>
          <span class="k">this</span>.options.placement

        $tip
          .detach()
          .css({ top<span class="o">:</span> <span class="mi">0</span>, left<span class="o">:</span> <span class="mi">0</span>, display<span class="o">:</span> <span class="s1">'block'</span> })

        <span class="k">this</span>.options.container <span class="o">?</span> $tip.appendTo(<span class="k">this</span>.options.container) <span class="o">:</span> $tip.insertAfter(<span class="k">this</span>.$element)

        pos <span class="o">=</span> <span class="k">this</span>.getPosition()

        actualWidth <span class="o">=</span> $tip[<span class="mi">0</span>].offsetWidth
        actualHeight <span class="o">=</span> $tip[<span class="mi">0</span>].offsetHeight

        <span class="k">switch</span> (placement) {
          <span class="k">case</span> <span class="s1">'bottom'</span><span class="o">:</span>
            tp <span class="o">=</span> {top<span class="o">:</span> pos.top <span class="o">+</span> pos.height, left<span class="o">:</span> pos.left <span class="o">+</span> pos.width <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> actualWidth <span class="o">/</span> <span class="mi">2</span>}
            <span class="k">break</span>
          <span class="k">case</span> <span class="s1">'top'</span><span class="o">:</span>
            tp <span class="o">=</span> {top<span class="o">:</span> pos.top <span class="o">-</span> actualHeight, left<span class="o">:</span> pos.left <span class="o">+</span> pos.width <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> actualWidth <span class="o">/</span> <span class="mi">2</span>}
            <span class="k">break</span>
          <span class="k">case</span> <span class="s1">'left'</span><span class="o">:</span>
            tp <span class="o">=</span> {top<span class="o">:</span> pos.top <span class="o">+</span> pos.height <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> actualHeight <span class="o">/</span> <span class="mi">2</span>, left<span class="o">:</span> pos.left <span class="o">-</span> actualWidth}
            <span class="k">break</span>
          <span class="k">case</span> <span class="s1">'right'</span><span class="o">:</span>
            tp <span class="o">=</span> {top<span class="o">:</span> pos.top <span class="o">+</span> pos.height <span class="o">/</span> <span class="mi">2</span> <span class="o">-</span> actualHeight <span class="o">/</span> <span class="mi">2</span>, left<span class="o">:</span> pos.left <span class="o">+</span> pos.width}
            <span class="k">break</span>
        }

        <span class="k">this</span>.applyPlacement(tp, placement)
        <span class="k">this</span>.$element.trigger(<span class="s1">'shown'</span>)
      }
    }

  , applyPlacement<span class="o">:</span> <span class="kd">function</span>(offset, placement){
      <span class="kd">var</span> $tip <span class="o">=</span> <span class="k">this</span>.tip()
        , width <span class="o">=</span> $tip[<span class="mi">0</span>].offsetWidth
        , height <span class="o">=</span> $tip[<span class="mi">0</span>].offsetHeight
        , actualWidth
        , actualHeight
        , delta
        , replace

      $tip
        .offset(offset)
        .addClass(placement)
        .addClass(<span class="s1">'in'</span>)

      actualWidth <span class="o">=</span> $tip[<span class="mi">0</span>].offsetWidth
      actualHeight <span class="o">=</span> $tip[<span class="mi">0</span>].offsetHeight

      <span class="k">if</span> (placement <span class="o">==</span> <span class="s1">'top'</span> <span class="o">&amp;&amp;</span> actualHeight <span class="o">!=</span> height) {
        offset.top <span class="o">=</span> offset.top <span class="o">+</span> height <span class="o">-</span> actualHeight
        replace <span class="o">=</span> <span class="kc">true</span>
      }

      <span class="k">if</span> (placement <span class="o">==</span> <span class="s1">'bottom'</span> <span class="o">||</span> placement <span class="o">==</span> <span class="s1">'top'</span>) {
        delta <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> (offset.left <span class="o">&lt;</span> <span class="mi">0</span>){
          delta <span class="o">=</span> offset.left <span class="o">*</span> <span class="o">-</span><span class="mi">2</span>
          offset.left <span class="o">=</span> <span class="mi">0</span>
          $tip.offset(offset)
          actualWidth <span class="o">=</span> $tip[<span class="mi">0</span>].offsetWidth
          actualHeight <span class="o">=</span> $tip[<span class="mi">0</span>].offsetHeight
        }

        <span class="k">this</span>.replaceArrow(delta <span class="o">-</span> width <span class="o">+</span> actualWidth, actualWidth, <span class="s1">'left'</span>)
      } <span class="k">else</span> {
        <span class="k">this</span>.replaceArrow(actualHeight <span class="o">-</span> height, actualHeight, <span class="s1">'top'</span>)
      }

      <span class="k">if</span> (replace) $tip.offset(offset)
    }

  , replaceArrow<span class="o">:</span> <span class="kd">function</span>(delta, dimension, position){
      <span class="k">this</span>
        .arrow()
        .css(position, delta <span class="o">?</span> (<span class="mi">50</span> <span class="o">*</span> (<span class="mi">1</span> <span class="o">-</span> delta <span class="o">/</span> dimension) <span class="o">+</span> <span class="s2">"%"</span>) <span class="o">:</span> <span class="s1">''</span>)
    }

  , setContent<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> $tip <span class="o">=</span> <span class="k">this</span>.tip()
        , title <span class="o">=</span> <span class="k">this</span>.getTitle()

      $tip.find(<span class="s1">'.tooltip-inner'</span>)[<span class="k">this</span>.options.html <span class="o">?</span> <span class="s1">'html'</span> <span class="o">:</span> <span class="s1">'text'</span>](title)
      $tip.removeClass(<span class="s1">'fade in top bottom left right'</span>)
    }

  , hide<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>
        , $tip <span class="o">=</span> <span class="k">this</span>.tip()
        , e <span class="o">=</span> $.Event(<span class="s1">'hide'</span>)

      <span class="k">this</span>.$element.trigger(e)
      <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>

      $tip.removeClass(<span class="s1">'in'</span>)

      <span class="kd">function</span> removeWithAnimation() {
        <span class="kd">var</span> timeout <span class="o">=</span> setTimeout(<span class="kd">function</span> () {
          $tip.off($.support.transition.end).detach()
        }, <span class="mi">500</span>)

        $tip.one($.support.transition.end, <span class="kd">function</span> () {
          clearTimeout(timeout)
          $tip.detach()
        })
      }

      $.support.transition <span class="o">&amp;&amp;</span> <span class="k">this</span>.$tip.hasClass(<span class="s1">'fade'</span>) <span class="o">?</span>
        removeWithAnimation() <span class="o">:</span>
        $tip.detach()

      <span class="k">this</span>.$element.trigger(<span class="s1">'hidden'</span>)

      <span class="k">return</span> <span class="k">this</span>
    }

  , fixTitle<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> $e <span class="o">=</span> <span class="k">this</span>.$element
      <span class="k">if</span> ($e.attr(<span class="s1">'title'</span>) <span class="o">||</span> <span class="k">typeof</span>($e.attr(<span class="s1">'data-original-title'</span>)) <span class="o">!=</span> <span class="s1">'string'</span>) {
        $e.attr(<span class="s1">'data-original-title'</span>, $e.attr(<span class="s1">'title'</span>) <span class="o">||</span> <span class="s1">''</span>).attr(<span class="s1">'title'</span>, <span class="s1">''</span>)
      }
    }

  , hasContent<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">return</span> <span class="k">this</span>.getTitle()
    }

  , getPosition<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> el <span class="o">=</span> <span class="k">this</span>.$element[<span class="mi">0</span>]
      <span class="k">return</span> $.extend({}, (<span class="k">typeof</span> el.getBoundingClientRect <span class="o">==</span> <span class="s1">'function'</span>) <span class="o">?</span> el.getBoundingClientRect() <span class="o">:</span> {
        width<span class="o">:</span> el.offsetWidth
      , height<span class="o">:</span> el.offsetHeight
      }, <span class="k">this</span>.$element.offset())
    }

  , getTitle<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> title
        , $e <span class="o">=</span> <span class="k">this</span>.$element
        , o <span class="o">=</span> <span class="k">this</span>.options

      title <span class="o">=</span> $e.attr(<span class="s1">'data-original-title'</span>)
        <span class="o">||</span> (<span class="k">typeof</span> o.title <span class="o">==</span> <span class="s1">'function'</span> <span class="o">?</span> o.title.call($e[<span class="mi">0</span>]) <span class="o">:</span>  o.title)

      <span class="k">return</span> title
    }

  , tip<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">return</span> <span class="k">this</span>.$tip <span class="o">=</span> <span class="k">this</span>.$tip <span class="o">||</span> $(<span class="k">this</span>.options.template)
    }

  , arrow<span class="o">:</span> <span class="kd">function</span>(){
      <span class="k">return</span> <span class="k">this</span>.$arrow <span class="o">=</span> <span class="k">this</span>.$arrow <span class="o">||</span> <span class="k">this</span>.tip().find(<span class="s2">".tooltip-arrow"</span>)
    }

  , validate<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.$element[<span class="mi">0</span>].parentNode) {
        <span class="k">this</span>.hide()
        <span class="k">this</span>.$element <span class="o">=</span> <span class="kc">null</span>
        <span class="k">this</span>.options <span class="o">=</span> <span class="kc">null</span>
      }
    }

  , enable<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.enabled <span class="o">=</span> <span class="kc">true</span>
    }

  , disable<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.enabled <span class="o">=</span> <span class="kc">false</span>
    }

  , toggleEnabled<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.enabled <span class="o">=</span> <span class="o">!</span><span class="k">this</span>.enabled
    }

  , toggle<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="kd">var</span> self <span class="o">=</span> e <span class="o">?</span> $(e.currentTarget)[<span class="k">this</span>.type](<span class="k">this</span>._options).data(<span class="k">this</span>.type) <span class="o">:</span> <span class="k">this</span>
      self.tip().hasClass(<span class="s1">'in'</span>) <span class="o">?</span> self.hide() <span class="o">:</span> self.show()
    }

  , destroy<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.hide().$element.off(<span class="s1">'.'</span> <span class="o">+</span> <span class="k">this</span>.type).removeData(<span class="k">this</span>.type)
    }

  }
</pre></td>
              </tr>
              <tr id="line-1185">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1185">
                      1185
                      ¶
                    </a>
                  </div>
                  <p>TOOLTIP PLUGIN DEFINITION
                    * ========================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.tooltip

  $.fn.tooltip <span class="o">=</span> <span class="kd">function</span> ( option ) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'tooltip'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'tooltip'</span>, (data <span class="o">=</span> <span class="k">new</span> Tooltip(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.tooltip.Constructor <span class="o">=</span> Tooltip

  $.fn.tooltip.defaults <span class="o">=</span> {
    animation<span class="o">:</span> <span class="kc">true</span>
  , placement<span class="o">:</span> <span class="s1">'top'</span>
  , selector<span class="o">:</span> <span class="kc">false</span>
  , template<span class="o">:</span> <span class="s1">'&lt;div class="tooltip"&gt;&lt;div class="tooltip-arrow"&gt;&lt;/div&gt;&lt;div class="tooltip-inner"&gt;&lt;/div&gt;&lt;/div&gt;'</span>
  , trigger<span class="o">:</span> <span class="s1">'hover focus'</span>
  , title<span class="o">:</span> <span class="s1">''</span>
  , delay<span class="o">:</span> <span class="mi">0</span>
  , html<span class="o">:</span> <span class="kc">false</span>
  , container<span class="o">:</span> <span class="kc">false</span>
  }
</pre></td>
              </tr>
              <tr id="line-1214">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1214">
                      1214
                      ¶
                    </a>
                  </div>
                  <p>TOOLTIP NO CONFLICT
                    * =================== */</p>
                </td>
                <td class="code"><pre>  $.fn.tooltip.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.tooltip <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }

}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
              <tr id="line-1222">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1222">
                      1222
                      ¶
                    </a>
                  </div>
                  <p>===========================================================
                   * bootstrap-popover.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#popovers
                   * ===========================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * =========================================================== */</p>
                </td>
              </tr>
              <tr id="line-1225">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1225">
                      1225
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-1229">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1229">
                      1229
                      ¶
                    </a>
                  </div>
                  <p>POPOVER PUBLIC CLASS DEFINITION
                    * =============================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Popover <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.init(<span class="s1">'popover'</span>, element, options)
  }
</pre></td>
              </tr>
              <tr id="line-1236">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1236">
                      1236
                      ¶
                    </a>
                  </div>
                  <p>NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
                       ========================================== */</p>
                </td>
                <td class="code"><pre>  Popover.prototype <span class="o">=</span> $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor<span class="o">:</span> Popover

  , setContent<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> $tip <span class="o">=</span> <span class="k">this</span>.tip()
        , title <span class="o">=</span> <span class="k">this</span>.getTitle()
        , content <span class="o">=</span> <span class="k">this</span>.getContent()

      $tip.find(<span class="s1">'.popover-title'</span>)[<span class="k">this</span>.options.html <span class="o">?</span> <span class="s1">'html'</span> <span class="o">:</span> <span class="s1">'text'</span>](title)
      $tip.find(<span class="s1">'.popover-content'</span>)[<span class="k">this</span>.options.html <span class="o">?</span> <span class="s1">'html'</span> <span class="o">:</span> <span class="s1">'text'</span>](content)

      $tip.removeClass(<span class="s1">'fade top bottom left right in'</span>)
    }

  , hasContent<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">return</span> <span class="k">this</span>.getTitle() <span class="o">||</span> <span class="k">this</span>.getContent()
    }

  , getContent<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> content
        , $e <span class="o">=</span> <span class="k">this</span>.$element
        , o <span class="o">=</span> <span class="k">this</span>.options

      content <span class="o">=</span> (<span class="k">typeof</span> o.content <span class="o">==</span> <span class="s1">'function'</span> <span class="o">?</span> o.content.call($e[<span class="mi">0</span>]) <span class="o">:</span>  o.content)
        <span class="o">||</span> $e.attr(<span class="s1">'data-content'</span>)

      <span class="k">return</span> content
    }

  , tip<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.$tip) {
        <span class="k">this</span>.$tip <span class="o">=</span> $(<span class="k">this</span>.options.template)
      }
      <span class="k">return</span> <span class="k">this</span>.$tip
    }

  , destroy<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.hide().$element.off(<span class="s1">'.'</span> <span class="o">+</span> <span class="k">this</span>.type).removeData(<span class="k">this</span>.type)
    }

  })
</pre></td>
              </tr>
              <tr id="line-1282">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1282">
                      1282
                      ¶
                    </a>
                  </div>
                  <p>POPOVER PLUGIN DEFINITION
                    * ======================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.popover

  $.fn.popover <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'popover'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'popover'</span>, (data <span class="o">=</span> <span class="k">new</span> Popover(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.popover.Constructor <span class="o">=</span> Popover

  $.fn.popover.defaults <span class="o">=</span> $.extend({} , $.fn.tooltip.defaults, {
    placement<span class="o">:</span> <span class="s1">'right'</span>
  , trigger<span class="o">:</span> <span class="s1">'click'</span>
  , content<span class="o">:</span> <span class="s1">''</span>
  , template<span class="o">:</span> <span class="s1">'&lt;div class="popover"&gt;&lt;div class="arrow"&gt;&lt;/div&gt;&lt;h3 class="popover-title"&gt;&lt;/h3&gt;&lt;div class="popover-content"&gt;&lt;/div&gt;&lt;/div&gt;'</span>
  })
</pre></td>
              </tr>
              <tr id="line-1306">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1306">
                      1306
                      ¶
                    </a>
                  </div>
                  <p>POPOVER NO CONFLICT
                    * =================== */</p>
                </td>
                <td class="code"><pre>  $.fn.popover.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.popover <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }

}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
              <tr id="line-1314">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1314">
                      1314
                      ¶
                    </a>
                  </div>
                  <p>=============================================================
                   * bootstrap-scrollspy.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#scrollspy
                   * =============================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * ============================================================== */</p>
                </td>
              </tr>
              <tr id="line-1317">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1317">
                      1317
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-1321">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1321">
                      1321
                      ¶
                    </a>
                  </div>
                  <p>SCROLLSPY CLASS DEFINITION
                    * ========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">function</span> ScrollSpy(element, options) {
    <span class="kd">var</span> process <span class="o">=</span> $.proxy(<span class="k">this</span>.process, <span class="k">this</span>)
      , $element <span class="o">=</span> $(element).is(<span class="s1">'body'</span>) <span class="o">?</span> $(<span class="nb">window</span>) <span class="o">:</span> $(element)
      , href
    <span class="k">this</span>.options <span class="o">=</span> $.extend({}, $.fn.scrollspy.defaults, options)
    <span class="k">this</span>.$scrollElement <span class="o">=</span> $element.on(<span class="s1">'scroll.scroll-spy.data-api'</span>, process)
    <span class="k">this</span>.selector <span class="o">=</span> (<span class="k">this</span>.options.target
      <span class="o">||</span> ((href <span class="o">=</span> $(element).attr(<span class="s1">'href'</span>)) <span class="o">&amp;&amp;</span> href.replace(<span class="sr">/.*(?=#[^\s]+$)/</span>, <span class="s1">''</span>)) <span class="c1">//strip for ie7
</span>      <span class="o">||</span> <span class="s1">''</span>) <span class="o">+</span> <span class="s1">' .nav li &gt; a'</span>
    <span class="k">this</span>.$body <span class="o">=</span> $(<span class="s1">'body'</span>)
    <span class="k">this</span>.refresh()
    <span class="k">this</span>.process()
  }

  ScrollSpy.prototype <span class="o">=</span> {

      constructor<span class="o">:</span> ScrollSpy

    , refresh<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> self <span class="o">=</span> <span class="k">this</span>
          , $targets

        <span class="k">this</span>.offsets <span class="o">=</span> $([])
        <span class="k">this</span>.targets <span class="o">=</span> $([])

        $targets <span class="o">=</span> <span class="k">this</span>.$body
          .find(<span class="k">this</span>.selector)
          .map(<span class="kd">function</span> () {
            <span class="kd">var</span> $el <span class="o">=</span> $(<span class="k">this</span>)
              , href <span class="o">=</span> $el.data(<span class="s1">'target'</span>) <span class="o">||</span> $el.attr(<span class="s1">'href'</span>)
              , $href <span class="o">=</span> <span class="sr">/^#\w/</span>.test(href) <span class="o">&amp;&amp;</span> $(href)
            <span class="k">return</span> ( $href
              <span class="o">&amp;&amp;</span> $href.length
              <span class="o">&amp;&amp;</span> [[ $href.position().top <span class="o">+</span> (<span class="o">!</span>$.isWindow(self.$scrollElement.get(<span class="mi">0</span>)) <span class="o">&amp;&amp;</span> self.$scrollElement.scrollTop()), href ]] ) <span class="o">||</span> <span class="kc">null</span>
          })
          .sort(<span class="kd">function</span> (a, b) { <span class="k">return</span> a[<span class="mi">0</span>] <span class="o">-</span> b[<span class="mi">0</span>] })
          .each(<span class="kd">function</span> () {
            self.offsets.push(<span class="k">this</span>[<span class="mi">0</span>])
            self.targets.push(<span class="k">this</span>[<span class="mi">1</span>])
          })
      }

    , process<span class="o">:</span> <span class="kd">function</span> () {
        <span class="kd">var</span> scrollTop <span class="o">=</span> <span class="k">this</span>.$scrollElement.scrollTop() <span class="o">+</span> <span class="k">this</span>.options.offset
          , scrollHeight <span class="o">=</span> <span class="k">this</span>.$scrollElement[<span class="mi">0</span>].scrollHeight <span class="o">||</span> <span class="k">this</span>.$body[<span class="mi">0</span>].scrollHeight
          , maxScroll <span class="o">=</span> scrollHeight <span class="o">-</span> <span class="k">this</span>.$scrollElement.height()
          , offsets <span class="o">=</span> <span class="k">this</span>.offsets
          , targets <span class="o">=</span> <span class="k">this</span>.targets
          , activeTarget <span class="o">=</span> <span class="k">this</span>.activeTarget
          , i

        <span class="k">if</span> (scrollTop <span class="o">&gt;=</span> maxScroll) {
          <span class="k">return</span> activeTarget <span class="o">!=</span> (i <span class="o">=</span> targets.last()[<span class="mi">0</span>])
            <span class="o">&amp;&amp;</span> <span class="k">this</span>.activate ( i )
        }

        <span class="k">for</span> (i <span class="o">=</span> offsets.length; i<span class="o">--</span>;) {
          activeTarget <span class="o">!=</span> targets[i]
            <span class="o">&amp;&amp;</span> scrollTop <span class="o">&gt;=</span> offsets[i]
            <span class="o">&amp;&amp;</span> (<span class="o">!</span>offsets[i <span class="o">+</span> <span class="mi">1</span>] <span class="o">||</span> scrollTop <span class="o">&lt;=</span> offsets[i <span class="o">+</span> <span class="mi">1</span>])
            <span class="o">&amp;&amp;</span> <span class="k">this</span>.activate( targets[i] )
        }
      }

    , activate<span class="o">:</span> <span class="kd">function</span> (target) {
        <span class="kd">var</span> active
          , selector

        <span class="k">this</span>.activeTarget <span class="o">=</span> target

        $(<span class="k">this</span>.selector)
          .parent(<span class="s1">'.active'</span>)
          .removeClass(<span class="s1">'active'</span>)

        selector <span class="o">=</span> <span class="k">this</span>.selector
          <span class="o">+</span> <span class="s1">'[data-target="'</span> <span class="o">+</span> target <span class="o">+</span> <span class="s1">'"],'</span>
          <span class="o">+</span> <span class="k">this</span>.selector <span class="o">+</span> <span class="s1">'[href="'</span> <span class="o">+</span> target <span class="o">+</span> <span class="s1">'"]'</span>

        active <span class="o">=</span> $(selector)
          .parent(<span class="s1">'li'</span>)
          .addClass(<span class="s1">'active'</span>)

        <span class="k">if</span> (active.parent(<span class="s1">'.dropdown-menu'</span>).length)  {
          active <span class="o">=</span> active.closest(<span class="s1">'li.dropdown'</span>).addClass(<span class="s1">'active'</span>)
        }

        active.trigger(<span class="s1">'activate'</span>)
      }

  }
</pre></td>
              </tr>
              <tr id="line-1414">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1414">
                      1414
                      ¶
                    </a>
                  </div>
                  <p>SCROLLSPY PLUGIN DEFINITION
                    * =========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.scrollspy

  $.fn.scrollspy <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'scrollspy'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'scrollspy'</span>, (data <span class="o">=</span> <span class="k">new</span> ScrollSpy(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.scrollspy.Constructor <span class="o">=</span> ScrollSpy

  $.fn.scrollspy.defaults <span class="o">=</span> {
    offset<span class="o">:</span> <span class="mi">10</span>
  }
</pre></td>
              </tr>
              <tr id="line-1435">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1435">
                      1435
                      ¶
                    </a>
                  </div>
                  <p>SCROLLSPY NO CONFLICT
                    * ===================== */</p>
                </td>
                <td class="code"><pre>  $.fn.scrollspy.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.scrollspy <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-1443">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1443">
                      1443
                      ¶
                    </a>
                  </div>
                  <p>SCROLLSPY DATA-API
                    * ================== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">window</span>).on(<span class="s1">'load'</span>, <span class="kd">function</span> () {
    $(<span class="s1">'[data-spy="scroll"]'</span>).each(<span class="kd">function</span> () {
      <span class="kd">var</span> $spy <span class="o">=</span> $(<span class="k">this</span>)
      $spy.scrollspy($spy.data())
    })
  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* ========================================================
 * bootstrap-tab.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */</span>


<span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-1459">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1459">
                      1459
                      ¶
                    </a>
                  </div>
                  <p>TAB CLASS DEFINITION
                    * ==================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Tab <span class="o">=</span> <span class="kd">function</span> (element) {
    <span class="k">this</span>.element <span class="o">=</span> $(element)
  }

  Tab.prototype <span class="o">=</span> {

    constructor<span class="o">:</span> Tab

  , show<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> <span class="k">this</span>.element
        , $ul <span class="o">=</span> $this.closest(<span class="s1">'ul:not(.dropdown-menu)'</span>)
        , selector <span class="o">=</span> $this.attr(<span class="s1">'data-target'</span>)
        , previous
        , $target
        , e

      <span class="k">if</span> (<span class="o">!</span>selector) {
        selector <span class="o">=</span> $this.attr(<span class="s1">'href'</span>)
        selector <span class="o">=</span> selector <span class="o">&amp;&amp;</span> selector.replace(<span class="sr">/.*(?=#[^\s]*$)/</span>, <span class="s1">''</span>) <span class="c1">//strip for ie7
</span>      }

      <span class="k">if</span> ( $this.parent(<span class="s1">'li'</span>).hasClass(<span class="s1">'active'</span>) ) <span class="k">return</span>

      previous <span class="o">=</span> $ul.find(<span class="s1">'.active:last a'</span>)[<span class="mi">0</span>]

      e <span class="o">=</span> $.Event(<span class="s1">'show'</span>, {
        relatedTarget<span class="o">:</span> previous
      })

      $this.trigger(e)

      <span class="k">if</span> (e.isDefaultPrevented()) <span class="k">return</span>

      $target <span class="o">=</span> $(selector)

      <span class="k">this</span>.activate($this.parent(<span class="s1">'li'</span>), $ul)
      <span class="k">this</span>.activate($target, $target.parent(), <span class="kd">function</span> () {
        $this.trigger({
          type<span class="o">:</span> <span class="s1">'shown'</span>
        , relatedTarget<span class="o">:</span> previous
        })
      })
    }

  , activate<span class="o">:</span> <span class="kd">function</span> ( element, container, callback) {
      <span class="kd">var</span> $active <span class="o">=</span> container.find(<span class="s1">'&gt; .active'</span>)
        , transition <span class="o">=</span> callback
            <span class="o">&amp;&amp;</span> $.support.transition
            <span class="o">&amp;&amp;</span> $active.hasClass(<span class="s1">'fade'</span>)

      <span class="kd">function</span> next() {
        $active
          .removeClass(<span class="s1">'active'</span>)
          .find(<span class="s1">'&gt; .dropdown-menu &gt; .active'</span>)
          .removeClass(<span class="s1">'active'</span>)

        element.addClass(<span class="s1">'active'</span>)

        <span class="k">if</span> (transition) {
          element[<span class="mi">0</span>].offsetWidth <span class="c1">// reflow for transition
</span>          element.addClass(<span class="s1">'in'</span>)
        } <span class="k">else</span> {
          element.removeClass(<span class="s1">'fade'</span>)
        }

        <span class="k">if</span> ( element.parent(<span class="s1">'.dropdown-menu'</span>) ) {
          element.closest(<span class="s1">'li.dropdown'</span>).addClass(<span class="s1">'active'</span>)
        }

        callback <span class="o">&amp;&amp;</span> callback()
      }

      transition <span class="o">?</span>
        $active.one($.support.transition.end, next) <span class="o">:</span>
        next()

      $active.removeClass(<span class="s1">'in'</span>)
    }
  }
</pre></td>
              </tr>
              <tr id="line-1540">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1540">
                      1540
                      ¶
                    </a>
                  </div>
                  <p>TAB PLUGIN DEFINITION
                    * ===================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.tab

  $.fn.tab <span class="o">=</span> <span class="kd">function</span> ( option ) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'tab'</span>)
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'tab'</span>, (data <span class="o">=</span> <span class="k">new</span> Tab(<span class="k">this</span>)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.tab.Constructor <span class="o">=</span> Tab
</pre></td>
              </tr>
              <tr id="line-1556">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1556">
                      1556
                      ¶
                    </a>
                  </div>
                  <p>TAB NO CONFLICT
                    * =============== */</p>
                </td>
                <td class="code"><pre>  $.fn.tab.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.tab <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-1564">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1564">
                      1564
                      ¶
                    </a>
                  </div>
                  <p>TAB DATA-API
                    * ============ */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'click.tab.data-api'</span>, <span class="s1">'[data-toggle="tab"], [data-toggle="pill"]'</span>, <span class="kd">function</span> (e) {
    e.preventDefault()
    $(<span class="k">this</span>).tab(<span class="s1">'show'</span>)
  })

}(<span class="nb">window</span>.jQuery);<span class="cm">/* =============================================================
 * bootstrap-typeahead.js v2.3.1
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */</span>


<span class="o">!</span><span class="kd">function</span>($){

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-1578">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1578">
                      1578
                      ¶
                    </a>
                  </div>
                  <p>TYPEAHEAD PUBLIC CLASS DEFINITION
                    * ================================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Typeahead <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
    <span class="k">this</span>.options <span class="o">=</span> $.extend({}, $.fn.typeahead.defaults, options)
    <span class="k">this</span>.matcher <span class="o">=</span> <span class="k">this</span>.options.matcher <span class="o">||</span> <span class="k">this</span>.matcher
    <span class="k">this</span>.sorter <span class="o">=</span> <span class="k">this</span>.options.sorter <span class="o">||</span> <span class="k">this</span>.sorter
    <span class="k">this</span>.highlighter <span class="o">=</span> <span class="k">this</span>.options.highlighter <span class="o">||</span> <span class="k">this</span>.highlighter
    <span class="k">this</span>.updater <span class="o">=</span> <span class="k">this</span>.options.updater <span class="o">||</span> <span class="k">this</span>.updater
    <span class="k">this</span>.source <span class="o">=</span> <span class="k">this</span>.options.source
    <span class="k">this</span>.$menu <span class="o">=</span> $(<span class="k">this</span>.options.menu)
    <span class="k">this</span>.shown <span class="o">=</span> <span class="kc">false</span>
    <span class="k">this</span>.listen()
  }

  Typeahead.prototype <span class="o">=</span> {

    constructor<span class="o">:</span> Typeahead

  , select<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> val <span class="o">=</span> <span class="k">this</span>.$menu.find(<span class="s1">'.active'</span>).attr(<span class="s1">'data-value'</span>)
      <span class="k">this</span>.$element
        .val(<span class="k">this</span>.updater(val))
        .change()
      <span class="k">return</span> <span class="k">this</span>.hide()
    }

  , updater<span class="o">:</span> <span class="kd">function</span> (item) {
      <span class="k">return</span> item
    }

  , show<span class="o">:</span> <span class="kd">function</span> () {
      <span class="kd">var</span> pos <span class="o">=</span> $.extend({}, <span class="k">this</span>.$element.position(), {
        height<span class="o">:</span> <span class="k">this</span>.$element[<span class="mi">0</span>].offsetHeight
      })

      <span class="k">this</span>.$menu
        .insertAfter(<span class="k">this</span>.$element)
        .css({
          top<span class="o">:</span> pos.top <span class="o">+</span> pos.height
        , left<span class="o">:</span> pos.left
        })
        .show()

      <span class="k">this</span>.shown <span class="o">=</span> <span class="kc">true</span>
      <span class="k">return</span> <span class="k">this</span>
    }

  , hide<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.$menu.hide()
      <span class="k">this</span>.shown <span class="o">=</span> <span class="kc">false</span>
      <span class="k">return</span> <span class="k">this</span>
    }

  , lookup<span class="o">:</span> <span class="kd">function</span> (event) {
      <span class="kd">var</span> items

      <span class="k">this</span>.query <span class="o">=</span> <span class="k">this</span>.$element.val()

      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.query <span class="o">||</span> <span class="k">this</span>.query.length <span class="o">&lt;</span> <span class="k">this</span>.options.minLength) {
        <span class="k">return</span> <span class="k">this</span>.shown <span class="o">?</span> <span class="k">this</span>.hide() <span class="o">:</span> <span class="k">this</span>
      }

      items <span class="o">=</span> $.isFunction(<span class="k">this</span>.source) <span class="o">?</span> <span class="k">this</span>.source(<span class="k">this</span>.query, $.proxy(<span class="k">this</span>.process, <span class="k">this</span>)) <span class="o">:</span> <span class="k">this</span>.source

      <span class="k">return</span> items <span class="o">?</span> <span class="k">this</span>.process(items) <span class="o">:</span> <span class="k">this</span>
    }

  , process<span class="o">:</span> <span class="kd">function</span> (items) {
      <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>

      items <span class="o">=</span> $.grep(items, <span class="kd">function</span> (item) {
        <span class="k">return</span> that.matcher(item)
      })

      items <span class="o">=</span> <span class="k">this</span>.sorter(items)

      <span class="k">if</span> (<span class="o">!</span>items.length) {
        <span class="k">return</span> <span class="k">this</span>.shown <span class="o">?</span> <span class="k">this</span>.hide() <span class="o">:</span> <span class="k">this</span>
      }

      <span class="k">return</span> <span class="k">this</span>.render(items.slice(<span class="mi">0</span>, <span class="k">this</span>.options.items)).show()
    }

  , matcher<span class="o">:</span> <span class="kd">function</span> (item) {
      <span class="k">return</span> <span class="o">~</span>item.toLowerCase().indexOf(<span class="k">this</span>.query.toLowerCase())
    }

  , sorter<span class="o">:</span> <span class="kd">function</span> (items) {
      <span class="kd">var</span> beginswith <span class="o">=</span> []
        , caseSensitive <span class="o">=</span> []
        , caseInsensitive <span class="o">=</span> []
        , item

      <span class="k">while</span> (item <span class="o">=</span> items.shift()) {
        <span class="k">if</span> (<span class="o">!</span>item.toLowerCase().indexOf(<span class="k">this</span>.query.toLowerCase())) beginswith.push(item)
        <span class="k">else</span> <span class="k">if</span> (<span class="o">~</span>item.indexOf(<span class="k">this</span>.query)) caseSensitive.push(item)
        <span class="k">else</span> caseInsensitive.push(item)
      }

      <span class="k">return</span> beginswith.concat(caseSensitive, caseInsensitive)
    }

  , highlighter<span class="o">:</span> <span class="kd">function</span> (item) {
      <span class="kd">var</span> query <span class="o">=</span> <span class="k">this</span>.query.replace(<span class="sr">/[\-\[\]{}()*+?.,\\\^$|#\s]/g</span>, <span class="s1">'\\$&amp;'</span>)
      <span class="k">return</span> item.replace(<span class="k">new</span> <span class="nb">RegExp</span>(<span class="s1">'('</span> <span class="o">+</span> query <span class="o">+</span> <span class="s1">')'</span>, <span class="s1">'ig'</span>), <span class="kd">function</span> ($1, match) {
        <span class="k">return</span> <span class="s1">'&lt;strong&gt;'</span> <span class="o">+</span> match <span class="o">+</span> <span class="s1">'&lt;/strong&gt;'</span>
      })
    }

  , render<span class="o">:</span> <span class="kd">function</span> (items) {
      <span class="kd">var</span> that <span class="o">=</span> <span class="k">this</span>

      items <span class="o">=</span> $(items).map(<span class="kd">function</span> (i, item) {
        i <span class="o">=</span> $(that.options.item).attr(<span class="s1">'data-value'</span>, item)
        i.find(<span class="s1">'a'</span>).html(that.highlighter(item))
        <span class="k">return</span> i[<span class="mi">0</span>]
      })

      items.first().addClass(<span class="s1">'active'</span>)
      <span class="k">this</span>.$menu.html(items)
      <span class="k">return</span> <span class="k">this</span>
    }

  , next<span class="o">:</span> <span class="kd">function</span> (event) {
      <span class="kd">var</span> active <span class="o">=</span> <span class="k">this</span>.$menu.find(<span class="s1">'.active'</span>).removeClass(<span class="s1">'active'</span>)
        , next <span class="o">=</span> active.next()

      <span class="k">if</span> (<span class="o">!</span>next.length) {
        next <span class="o">=</span> $(<span class="k">this</span>.$menu.find(<span class="s1">'li'</span>)[<span class="mi">0</span>])
      }

      next.addClass(<span class="s1">'active'</span>)
    }

  , prev<span class="o">:</span> <span class="kd">function</span> (event) {
      <span class="kd">var</span> active <span class="o">=</span> <span class="k">this</span>.$menu.find(<span class="s1">'.active'</span>).removeClass(<span class="s1">'active'</span>)
        , prev <span class="o">=</span> active.prev()

      <span class="k">if</span> (<span class="o">!</span>prev.length) {
        prev <span class="o">=</span> <span class="k">this</span>.$menu.find(<span class="s1">'li'</span>).last()
      }

      prev.addClass(<span class="s1">'active'</span>)
    }

  , listen<span class="o">:</span> <span class="kd">function</span> () {
      <span class="k">this</span>.$element
        .on(<span class="s1">'focus'</span>,    $.proxy(<span class="k">this</span>.focus, <span class="k">this</span>))
        .on(<span class="s1">'blur'</span>,     $.proxy(<span class="k">this</span>.blur, <span class="k">this</span>))
        .on(<span class="s1">'keypress'</span>, $.proxy(<span class="k">this</span>.keypress, <span class="k">this</span>))
        .on(<span class="s1">'keyup'</span>,    $.proxy(<span class="k">this</span>.keyup, <span class="k">this</span>))

      <span class="k">if</span> (<span class="k">this</span>.eventSupported(<span class="s1">'keydown'</span>)) {
        <span class="k">this</span>.$element.on(<span class="s1">'keydown'</span>, $.proxy(<span class="k">this</span>.keydown, <span class="k">this</span>))
      }

      <span class="k">this</span>.$menu
        .on(<span class="s1">'click'</span>, $.proxy(<span class="k">this</span>.click, <span class="k">this</span>))
        .on(<span class="s1">'mouseenter'</span>, <span class="s1">'li'</span>, $.proxy(<span class="k">this</span>.mouseenter, <span class="k">this</span>))
        .on(<span class="s1">'mouseleave'</span>, <span class="s1">'li'</span>, $.proxy(<span class="k">this</span>.mouseleave, <span class="k">this</span>))
    }

  , eventSupported<span class="o">:</span> <span class="kd">function</span>(eventName) {
      <span class="kd">var</span> isSupported <span class="o">=</span> eventName <span class="k">in</span> <span class="k">this</span>.$element
      <span class="k">if</span> (<span class="o">!</span>isSupported) {
        <span class="k">this</span>.$element.setAttribute(eventName, <span class="s1">'return;'</span>)
        isSupported <span class="o">=</span> <span class="k">typeof</span> <span class="k">this</span>.$element[eventName] <span class="o">===</span> <span class="s1">'function'</span>
      }
      <span class="k">return</span> isSupported
    }

  , move<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.shown) <span class="k">return</span>

      <span class="k">switch</span>(e.keyCode) {
        <span class="k">case</span> <span class="mi">9</span><span class="o">:</span> <span class="c1">// tab
</span>        <span class="k">case</span> <span class="mi">13</span><span class="o">:</span> <span class="c1">// enter
</span>        <span class="k">case</span> <span class="mi">27</span><span class="o">:</span> <span class="c1">// escape
</span>          e.preventDefault()
          <span class="k">break</span>

        <span class="k">case</span> <span class="mi">38</span><span class="o">:</span> <span class="c1">// up arrow
</span>          e.preventDefault()
          <span class="k">this</span>.prev()
          <span class="k">break</span>

        <span class="k">case</span> <span class="mi">40</span><span class="o">:</span> <span class="c1">// down arrow
</span>          e.preventDefault()
          <span class="k">this</span>.next()
          <span class="k">break</span>
      }

      e.stopPropagation()
    }

  , keydown<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">this</span>.suppressKeyPressRepeat <span class="o">=</span> <span class="o">~</span>$.inArray(e.keyCode, [<span class="mi">40</span>,<span class="mi">38</span>,<span class="mi">9</span>,<span class="mi">13</span>,<span class="mi">27</span>])
      <span class="k">this</span>.move(e)
    }

  , keypress<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">if</span> (<span class="k">this</span>.suppressKeyPressRepeat) <span class="k">return</span>
      <span class="k">this</span>.move(e)
    }

  , keyup<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">switch</span>(e.keyCode) {
        <span class="k">case</span> <span class="mi">40</span><span class="o">:</span> <span class="c1">// down arrow
</span>        <span class="k">case</span> <span class="mi">38</span><span class="o">:</span> <span class="c1">// up arrow
</span>        <span class="k">case</span> <span class="mi">16</span><span class="o">:</span> <span class="c1">// shift
</span>        <span class="k">case</span> <span class="mi">17</span><span class="o">:</span> <span class="c1">// ctrl
</span>        <span class="k">case</span> <span class="mi">18</span><span class="o">:</span> <span class="c1">// alt
</span>          <span class="k">break</span>

        <span class="k">case</span> <span class="mi">9</span><span class="o">:</span> <span class="c1">// tab
</span>        <span class="k">case</span> <span class="mi">13</span><span class="o">:</span> <span class="c1">// enter
</span>          <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.shown) <span class="k">return</span>
          <span class="k">this</span>.select()
          <span class="k">break</span>

        <span class="k">case</span> <span class="mi">27</span><span class="o">:</span> <span class="c1">// escape
</span>          <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.shown) <span class="k">return</span>
          <span class="k">this</span>.hide()
          <span class="k">break</span>

        <span class="k">default</span><span class="o">:</span>
          <span class="k">this</span>.lookup()
      }

      e.stopPropagation()
      e.preventDefault()
  }

  , focus<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">this</span>.focused <span class="o">=</span> <span class="kc">true</span>
    }

  , blur<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">this</span>.focused <span class="o">=</span> <span class="kc">false</span>
      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.mousedover <span class="o">&amp;&amp;</span> <span class="k">this</span>.shown) <span class="k">this</span>.hide()
    }

  , click<span class="o">:</span> <span class="kd">function</span> (e) {
      e.stopPropagation()
      e.preventDefault()
      <span class="k">this</span>.select()
      <span class="k">this</span>.$element.focus()
    }

  , mouseenter<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">this</span>.mousedover <span class="o">=</span> <span class="kc">true</span>
      <span class="k">this</span>.$menu.find(<span class="s1">'.active'</span>).removeClass(<span class="s1">'active'</span>)
      $(e.currentTarget).addClass(<span class="s1">'active'</span>)
    }

  , mouseleave<span class="o">:</span> <span class="kd">function</span> (e) {
      <span class="k">this</span>.mousedover <span class="o">=</span> <span class="kc">false</span>
      <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.focused <span class="o">&amp;&amp;</span> <span class="k">this</span>.shown) <span class="k">this</span>.hide()
    }

  }
</pre></td>
              </tr>
              <tr id="line-1829">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1829">
                      1829
                      ¶
                    </a>
                  </div>
                  <p>TYPEAHEAD PLUGIN DEFINITION
                     * =========================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.typeahead

  $.fn.typeahead <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'typeahead'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'typeahead'</span>, (data <span class="o">=</span> <span class="k">new</span> Typeahead(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.typeahead.defaults <span class="o">=</span> {
    source<span class="o">:</span> []
  , items<span class="o">:</span> <span class="mi">8</span>
  , menu<span class="o">:</span> <span class="s1">'&lt;ul class="typeahead dropdown-menu"&gt;&lt;/ul&gt;'</span>
  , item<span class="o">:</span> <span class="s1">'&lt;li&gt;&lt;a href="#"&gt;&lt;/a&gt;&lt;/li&gt;'</span>
  , minLength<span class="o">:</span> <span class="mi">1</span>
  }

  $.fn.typeahead.Constructor <span class="o">=</span> Typeahead
</pre></td>
              </tr>
              <tr id="line-1854">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1854">
                      1854
                      ¶
                    </a>
                  </div>
                  <p>TYPEAHEAD NO CONFLICT
                    * =================== */</p>
                </td>
                <td class="code"><pre>  $.fn.typeahead.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.typeahead <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-1862">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1862">
                      1862
                      ¶
                    </a>
                  </div>
                  <p>TYPEAHEAD DATA-API
                    * ================== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">document</span>).on(<span class="s1">'focus.typeahead.data-api'</span>, <span class="s1">'[data-provide="typeahead"]'</span>, <span class="kd">function</span> (e) {
    <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
    <span class="k">if</span> ($this.data(<span class="s1">'typeahead'</span>)) <span class="k">return</span>
    $this.typeahead($this.data())
  })

}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
              <tr id="line-1871">
                <td colspan="2">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1871">
                      1871
                      ¶
                    </a>
                  </div>
                  <p>==========================================================
                   * bootstrap-affix.js v2.3.1
                   * http://twitter.github.com/bootstrap/javascript.html#affix
                   * ==========================================================
                   * Copyright 2012 Twitter, Inc.
                   *
                   * Licensed under the Apache License, Version 2.0 (the “License”);
                   * you may not use this file except in compliance with the License.
                   * You may obtain a copy of the License at
                   *
                   * http://www.apache.org/licenses/LICENSE-2.0
                   *
                   * Unless required by applicable law or agreed to in writing, software
                   * distributed under the License is distributed on an “AS IS” BASIS,
                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                   * See the License for the specific language governing permissions and
                   * limitations under the License.
                   * ========================================================== */</p>
                </td>
              </tr>
              <tr id="line-1874">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1874">
                      1874
                      ¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="o">!</span><span class="kd">function</span> ($) {

  <span class="s2">"use strict"</span>; <span class="c1">// jshint ;_;
</span></pre></td>
              </tr>
              <tr id="line-1878">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1878">
                      1878
                      ¶
                    </a>
                  </div>
                  <p>AFFIX CLASS DEFINITION
                    * ====================== */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> Affix <span class="o">=</span> <span class="kd">function</span> (element, options) {
    <span class="k">this</span>.options <span class="o">=</span> $.extend({}, $.fn.affix.defaults, options)
    <span class="k">this</span>.$window <span class="o">=</span> $(<span class="nb">window</span>)
      .on(<span class="s1">'scroll.affix.data-api'</span>, $.proxy(<span class="k">this</span>.checkPosition, <span class="k">this</span>))
      .on(<span class="s1">'click.affix.data-api'</span>,  $.proxy(<span class="kd">function</span> () { setTimeout($.proxy(<span class="k">this</span>.checkPosition, <span class="k">this</span>), <span class="mi">1</span>) }, <span class="k">this</span>))
    <span class="k">this</span>.$element <span class="o">=</span> $(element)
    <span class="k">this</span>.checkPosition()
  }

  Affix.prototype.checkPosition <span class="o">=</span> <span class="kd">function</span> () {
    <span class="k">if</span> (<span class="o">!</span><span class="k">this</span>.$element.is(<span class="s1">':visible'</span>)) <span class="k">return</span>

    <span class="kd">var</span> scrollHeight <span class="o">=</span> $(<span class="nb">document</span>).height()
      , scrollTop <span class="o">=</span> <span class="k">this</span>.$window.scrollTop()
      , position <span class="o">=</span> <span class="k">this</span>.$element.offset()
      , offset <span class="o">=</span> <span class="k">this</span>.options.offset
      , offsetBottom <span class="o">=</span> offset.bottom
      , offsetTop <span class="o">=</span> offset.top
      , reset <span class="o">=</span> <span class="s1">'affix affix-top affix-bottom'</span>
      , affix

    <span class="k">if</span> (<span class="k">typeof</span> offset <span class="o">!=</span> <span class="s1">'object'</span>) offsetBottom <span class="o">=</span> offsetTop <span class="o">=</span> offset
    <span class="k">if</span> (<span class="k">typeof</span> offsetTop <span class="o">==</span> <span class="s1">'function'</span>) offsetTop <span class="o">=</span> offset.top()
    <span class="k">if</span> (<span class="k">typeof</span> offsetBottom <span class="o">==</span> <span class="s1">'function'</span>) offsetBottom <span class="o">=</span> offset.bottom()

    affix <span class="o">=</span> <span class="k">this</span>.unpin <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> (scrollTop <span class="o">+</span> <span class="k">this</span>.unpin <span class="o">&lt;=</span> position.top) <span class="o">?</span>
      <span class="kc">false</span>    <span class="o">:</span> offsetBottom <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> (position.top <span class="o">+</span> <span class="k">this</span>.$element.height() <span class="o">&gt;=</span> scrollHeight <span class="o">-</span> offsetBottom) <span class="o">?</span>
      <span class="s1">'bottom'</span> <span class="o">:</span> offsetTop <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> scrollTop <span class="o">&lt;=</span> offsetTop <span class="o">?</span>
      <span class="s1">'top'</span>    <span class="o">:</span> <span class="kc">false</span>

    <span class="k">if</span> (<span class="k">this</span>.affixed <span class="o">===</span> affix) <span class="k">return</span>

    <span class="k">this</span>.affixed <span class="o">=</span> affix
    <span class="k">this</span>.unpin <span class="o">=</span> affix <span class="o">==</span> <span class="s1">'bottom'</span> <span class="o">?</span> position.top <span class="o">-</span> scrollTop <span class="o">:</span> <span class="kc">null</span>

    <span class="k">this</span>.$element.removeClass(reset).addClass(<span class="s1">'affix'</span> <span class="o">+</span> (affix <span class="o">?</span> <span class="s1">'-'</span> <span class="o">+</span> affix <span class="o">:</span> <span class="s1">''</span>))
  }
</pre></td>
              </tr>
              <tr id="line-1919">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1919">
                      1919
                      ¶
                    </a>
                  </div>
                  <p>AFFIX PLUGIN DEFINITION
                    * ======================= */</p>
                </td>
                <td class="code"><pre>  <span class="kd">var</span> old <span class="o">=</span> $.fn.affix

  $.fn.affix <span class="o">=</span> <span class="kd">function</span> (option) {
    <span class="k">return</span> <span class="k">this</span>.each(<span class="kd">function</span> () {
      <span class="kd">var</span> $this <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $this.data(<span class="s1">'affix'</span>)
        , options <span class="o">=</span> <span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'object'</span> <span class="o">&amp;&amp;</span> option
      <span class="k">if</span> (<span class="o">!</span>data) $this.data(<span class="s1">'affix'</span>, (data <span class="o">=</span> <span class="k">new</span> Affix(<span class="k">this</span>, options)))
      <span class="k">if</span> (<span class="k">typeof</span> option <span class="o">==</span> <span class="s1">'string'</span>) data[option]()
    })
  }

  $.fn.affix.Constructor <span class="o">=</span> Affix

  $.fn.affix.defaults <span class="o">=</span> {
    offset<span class="o">:</span> <span class="mi">0</span>
  }
</pre></td>
              </tr>
              <tr id="line-1940">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1940">
                      1940
                      ¶
                    </a>
                  </div>
                  <p>AFFIX NO CONFLICT
                    * ================= */</p>
                </td>
                <td class="code"><pre>  $.fn.affix.noConflict <span class="o">=</span> <span class="kd">function</span> () {
    $.fn.affix <span class="o">=</span> old
    <span class="k">return</span> <span class="k">this</span>
  }
</pre></td>
              </tr>
              <tr id="line-1948">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1948">
                      1948
                      ¶
                    </a>
                  </div>
                  <p>AFFIX DATA-API
                    * ============== */</p>
                </td>
                <td class="code"><pre>  $(<span class="nb">window</span>).on(<span class="s1">'load'</span>, <span class="kd">function</span> () {
    $(<span class="s1">'[data-spy="affix"]'</span>).each(<span class="kd">function</span> () {
      <span class="kd">var</span> $spy <span class="o">=</span> $(<span class="k">this</span>)
        , data <span class="o">=</span> $spy.data()

      data.offset <span class="o">=</span> data.offset <span class="o">||</span> {}

      data.offsetBottom <span class="o">&amp;&amp;</span> (data.offset.bottom <span class="o">=</span> data.offsetBottom)
      data.offsetTop <span class="o">&amp;&amp;</span> (data.offset.top <span class="o">=</span> data.offsetTop)

      $spy.affix(data)
    })
  })


}(<span class="nb">window</span>.jQuery);</pre></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <script src="../../../../../_static/jquery-1.9.1.min.js"></script>
    <script src="../../../../../_static/bootstrap/js/bootstrap.min.js"></script>
  </body>
</html>
