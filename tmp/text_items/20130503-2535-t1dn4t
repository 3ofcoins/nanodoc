<!DOCTYPE html>
<html lang="en">
  <head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title></title>
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link href="../../../../_static/bootstrap/css/bootstrap.css" rel="stylesheet">
    <style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
    </style>
    <link href="../../../../_static/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="../../../../_static/pygments.css" rel="stylesheet">
    <link href="../../../../_static/rocco.css" rel="stylesheet">
  </head>
  <body>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="../../../../">nanodoc</a>
        </div>
      </div>
    </div>
    <div class="container-fluid">
      <div class="row-fluid">
        <div class="span12">
          <ul class="breadcrumb">
            <li>
              <a href="../../../../">nanodoc</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../../../">lib</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../../">nanodoc</a>
              <span class="divider">/</span>
            </li>
            <li>
              <a href="../">filters</a>
              <span class="divider">/</span>
            </li>
            <li class="active">literate_pyg.rb</li>
          </ul>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span2 well well-small">
          <ul class="nav nav-list">
            <li class="active">
              <i class="icon-hand-right"></i>
              <b>literate_pyg.rb</b>
            </li>
            <li>
              <a href="../txt.rb/">
                <i class="icon-file"></i>
                txt.rb
              </a>
            </li>
          </ul>
        </div>
        <div class="span10">
          <table class="table">
            <tbody>
              <tr id="line-1">
                <td colspan="1">
                  <div class="pilwrap">
                    <a class="pilcrow" href="#line-1">
                      1
                      Â¶
                    </a>
                  </div>
                  
                </td>
                <td class="code"><pre><span class="nb">require</span> <span class="s1">'micromachine'</span>
<span class="nb">require</span> <span class="s1">'nanoc'</span>
<span class="nb">require</span> <span class="s1">'nanoc/filters/haml'</span>
<span class="nb">require</span> <span class="s1">'nanoc/filters/maruku'</span>
<span class="nb">require</span> <span class="s1">'nanoc/helpers/html_escape'</span>

<span class="nb">require</span> <span class="s1">'nanodoc/pygments'</span>
<span class="nb">require</span> <span class="s1">'nanodoc/site'</span>

<span class="k">module</span> <span class="nn">Nanodoc</span>
  <span class="k">class</span> <span class="nc">PygmentsLiterateFilter</span> <span class="o">&lt;</span> <span class="ss">Nanoc</span>:<span class="ss">:Filters</span><span class="o">::</span><span class="no">Haml</span>
    identifier <span class="ss">:literate_pyg</span>
    type <span class="ss">:text</span>

    <span class="kp">include</span> <span class="ss">Nanoc</span>:<span class="ss">:Helpers</span><span class="o">::</span><span class="no">HTMLEscape</span>

    <span class="no">HAML_TEMPLATE</span> <span class="o">=</span> <span class="ss">Nanodoc</span>:<span class="ss">:Site</span><span class="o">::</span><span class="no">ROOT_DIR</span><span class="o">.</span>join(<span class="s1">'layouts'</span>, <span class="s1">'literate_pyg.haml'</span>)<span class="o">.</span>read()

    <span class="k">def</span> <span class="nf">create_line_machine</span>
      assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="o">]</span>

      machine <span class="o">=</span> <span class="no">MicroMachine</span><span class="o">.</span>new(<span class="ss">:bof</span>)

      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:code</span><span class="o">]</span>               <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span>new(<span class="ss">:code</span>)
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:code</span><span class="o">]</span><span class="o">[</span><span class="ss">:bof</span><span class="o">]</span>         <span class="o">=</span> <span class="ss">:new_code</span>
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:code</span><span class="o">]</span><span class="o">[</span><span class="ss">:section</span><span class="o">]</span>     <span class="o">=</span> <span class="ss">:new_code</span>
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:code</span><span class="o">]</span><span class="o">[</span><span class="ss">:new_section</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:new_code</span>

      machine<span class="o">.</span>when <span class="ss">:indented_comment</span>,
                   <span class="ss">:bof</span> <span class="o">=</span><span class="o">&gt;</span>           <span class="ss">:new_side_note</span>,
                   <span class="ss">:code</span> <span class="o">=</span><span class="o">&gt;</span>          <span class="ss">:new_side_note</span>,
                   <span class="ss">:section</span> <span class="o">=</span><span class="o">&gt;</span>       <span class="ss">:new_side_note</span>,
                   <span class="ss">:new_section</span> <span class="o">=</span><span class="o">&gt;</span>   <span class="ss">:new_side_note</span>,
                   <span class="ss">:new_side_note</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:side_note</span>,
                   <span class="ss">:side_note</span> <span class="o">=</span><span class="o">&gt;</span>     <span class="ss">:side_note</span>

      machine<span class="o">.</span>when <span class="ss">:unindented_comment</span>,
                   <span class="ss">:bof</span> <span class="o">=</span><span class="o">&gt;</span>           <span class="ss">:new_section</span>,
                   <span class="ss">:code</span> <span class="o">=</span><span class="o">&gt;</span>          <span class="ss">:new_section</span>,
                   <span class="ss">:side_note</span> <span class="o">=</span><span class="o">&gt;</span>     <span class="ss">:new_section</span>,
                   <span class="ss">:new_side_note</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:new_section</span>,
                   <span class="ss">:new_section</span> <span class="o">=</span><span class="o">&gt;</span>   <span class="ss">:section</span>,
                   <span class="ss">:section</span> <span class="o">=</span><span class="o">&gt;</span>       <span class="ss">:section</span>

      machine<span class="o">.</span>when <span class="ss">:empty_line</span>,
                   <span class="ss">:new_section</span> <span class="o">=</span><span class="o">&gt;</span>   <span class="ss">:section</span>,
                   <span class="ss">:section</span> <span class="o">=</span><span class="o">&gt;</span>       <span class="ss">:section</span>,
                   <span class="ss">:new_side_node</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:side_note</span>,
                   <span class="ss">:side_note</span> <span class="o">=</span><span class="o">&gt;</span>     <span class="ss">:side_note</span>,
                   <span class="ss">:new_code</span> <span class="o">=</span><span class="o">&gt;</span>      <span class="ss">:code</span>,
                   <span class="ss">:code</span> <span class="o">=</span><span class="o">&gt;</span>          <span class="ss">:code</span>


      machine<span class="o">.</span>on(<span class="ss">:new_code</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span> <span class="o">&lt;&lt;</span> { <span class="ss">:at</span> <span class="o">=</span><span class="o">&gt;</span> <span class="vi">@ln</span>, <span class="ss">:code_lines</span> <span class="o">=</span><span class="o">&gt;</span> <span class="o">[</span>render_code(<span class="vi">@indent</span>, <span class="vi">@line</span>)<span class="o">]</span> }
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:new_section</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span> <span class="o">&lt;&lt;</span> { <span class="ss">:at</span> <span class="o">=</span><span class="o">&gt;</span> <span class="vi">@ln</span>, <span class="ss">:comment_lines</span> <span class="o">=</span><span class="o">&gt;</span> <span class="o">[</span><span class="vi">@line</span><span class="o">.</span>map(<span class="o">&amp;</span><span class="ss">:first</span>)<span class="o">.</span>join<span class="o">]</span> }
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:new_side_note</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span> <span class="o">&lt;&lt;</span> { <span class="ss">:at</span> <span class="o">=</span><span class="o">&gt;</span> <span class="vi">@ln</span>, <span class="ss">:comment_lines</span> <span class="o">=</span><span class="o">&gt;</span> <span class="o">[</span><span class="vi">@line</span><span class="o">.</span>map(<span class="o">&amp;</span><span class="ss">:first</span>)<span class="o">.</span>join<span class="o">]</span>, <span class="ss">:code_lines</span> <span class="o">=</span><span class="o">&gt;</span> <span class="o">[</span><span class="o">]</span> }
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:code</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>last<span class="o">[</span><span class="ss">:code_lines</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span>render_code(<span class="vi">@indent</span>, <span class="vi">@line</span>)<span class="o">]</span>
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:section</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>last<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="vi">@line</span><span class="o">.</span>map(<span class="o">&amp;</span><span class="ss">:first</span>)<span class="o">.</span>join
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:side_note</span>) <span class="k">do</span>
        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>last<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="vi">@line</span><span class="o">.</span>map(<span class="o">&amp;</span><span class="ss">:first</span>)<span class="o">.</span>join
      <span class="k">end</span>

      machine
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">render_code</span>(indent, line)
      rv <span class="o">=</span> indent<span class="o">.</span>dup
      line<span class="o">.</span>each <span class="k">do</span> <span class="o">|</span>text, css_class<span class="o">|</span>
        <span class="k">if</span> css_class
          rv <span class="o">&lt;&lt;</span> <span class="s2">"</span><span class="s2">&lt;span class=</span><span class="se">\"</span><span class="si">#{</span>css_class<span class="si">}</span><span class="se">\"</span><span class="s2">&gt;</span><span class="si">#{</span>h(text)<span class="si">}</span><span class="s2">&lt;/span&gt;</span><span class="s2">"</span>
        <span class="k">else</span>
          rv <span class="o">&lt;&lt;</span> h(text)
        <span class="k">end</span>
      <span class="k">end</span>
      rv
    <span class="k">end</span>


    <span class="k">def</span> <span class="nf">create_token_machine</span>
      <span class="vi">@ln</span> <span class="o">=</span> <span class="mi">1</span>
      <span class="vi">@indent</span> <span class="o">=</span> <span class="s1">''</span>
      <span class="vi">@line</span> <span class="o">=</span> <span class="o">[</span><span class="o">]</span>
      <span class="vi">@is_code</span> <span class="o">=</span> <span class="kp">false</span>

      machine <span class="o">=</span> <span class="no">MicroMachine</span><span class="o">.</span>new(<span class="ss">:bol</span>)
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:newline</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span>new(<span class="ss">:bol</span>)
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:code</span><span class="o">]</span>    <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span>new(<span class="ss">:code</span>)
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:comment</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span>new(<span class="ss">:comment</span>)
      machine<span class="o">.</span>when <span class="ss">:whitespace</span>, <span class="ss">:bol</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:indent</span>,
                                <span class="ss">:indent</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:indent</span>,
                                <span class="ss">:code</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:code</span>,
                                <span class="ss">:comment</span> <span class="o">=</span><span class="o">&gt;</span> <span class="ss">:comment</span>
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:eof</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span>new(<span class="ss">:bol</span>)
      machine<span class="o">.</span>transitions_for<span class="o">[</span><span class="ss">:eof</span><span class="o">]</span><span class="o">[</span><span class="ss">:bol</span><span class="o">]</span> <span class="o">=</span> <span class="ss">:eof</span>

      machine<span class="o">.</span>on(<span class="ss">:bol</span>) <span class="k">do</span>
        event <span class="o">=</span> <span class="k">case</span>
                <span class="k">when</span> <span class="vi">@is_code</span> <span class="k">then</span>      <span class="ss">:code</span>
                <span class="k">when</span> <span class="vi">@line</span> <span class="o">==</span> <span class="o">[</span><span class="o">]</span>   <span class="k">then</span> <span class="ss">:empty_line</span>
                <span class="k">when</span> <span class="vi">@indent</span> <span class="o">==</span> <span class="s1">''</span> <span class="k">then</span> <span class="ss">:unindented_comment</span>
                <span class="k">else</span>                    <span class="ss">:indented_comment</span>
                <span class="k">end</span>
        line_machine<span class="o">.</span>trigger(event)
        <span class="vi">@indent</span> <span class="o">=</span> <span class="s1">''</span>
        <span class="vi">@line</span> <span class="o">=</span> <span class="o">[</span><span class="o">]</span>
        <span class="vi">@is_code</span> <span class="o">=</span> <span class="kp">false</span>
        <span class="vi">@ln</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:indent</span>) <span class="k">do</span>
        <span class="vi">@indent</span> <span class="o">&lt;&lt;</span> <span class="vi">@text</span>
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:code</span>) <span class="k">do</span>
        <span class="vi">@line</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="vi">@text</span>, <span class="vi">@css_class</span><span class="o">]</span>
        <span class="vi">@is_code</span> <span class="o">=</span> <span class="kp">true</span>
      <span class="k">end</span>

      machine<span class="o">.</span>on(<span class="ss">:comment</span>) <span class="k">do</span>
        <span class="vi">@line</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="vi">@text</span>, <span class="vi">@css_class</span><span class="o">]</span>
      <span class="k">end</span>

      machine
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">run</span>(content, params<span class="o">=</span>{})
      pyg<span class="o">.</span>parsed<span class="o">.</span>each <span class="k">do</span> <span class="o">|</span>text, type, css_class<span class="o">|</span>
        <span class="vi">@text</span> <span class="o">=</span> text
        <span class="vi">@css_class</span> <span class="o">=</span> css_class
        event <span class="o">=</span> <span class="k">case</span> type
                <span class="k">when</span> <span class="s1">'Text.Newline'</span>    <span class="k">then</span> <span class="ss">:newline</span>
                <span class="k">when</span> <span class="s1">'Text.Whitespace'</span> <span class="k">then</span> <span class="ss">:whitespace</span>
                <span class="k">when</span> <span class="sr">/</span><span class="sr">^Comment</span><span class="sr">/</span>        <span class="k">then</span> <span class="ss">:comment</span>
                <span class="k">else</span>                        <span class="ss">:code</span>
                <span class="k">end</span>
        token_machine<span class="o">.</span>trigger(event)
      <span class="k">end</span>
      token_machine<span class="o">.</span>trigger(<span class="ss">:eof</span>)

      <span class="k">if</span> assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span>
        <span class="k">if</span> opening_comments <span class="o">=</span> assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>first<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span>
          opening_comments<span class="o">.</span>shift <span class="k">if</span> opening_comments<span class="o">.</span>first <span class="o">=~</span> <span class="sr">/</span><span class="sr">^</span><span class="sr">\</span><span class="sr">#</span><span class="sr">\</span><span class="sr">!</span><span class="sr">/</span>
          opening_comments<span class="o">.</span>shift <span class="k">while</span> opening_comments<span class="o">.</span>first <span class="o">=~</span> <span class="sr">/</span><span class="sr">^</span><span class="sr">\</span><span class="sr">S*</span><span class="sr">\</span><span class="sr">s*-</span><span class="sr">\</span><span class="sr">*-.*-</span><span class="sr">\</span><span class="sr">*-</span><span class="sr">\</span><span class="sr">s*$</span><span class="sr">/</span>
          opening_comments<span class="o">.</span>pop <span class="k">while</span> opening_comments<span class="o">.</span>last <span class="o">==</span> <span class="s2">"</span><span class="s2">"</span>
          assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>shift <span class="k">if</span> opening_comments<span class="o">.</span>empty? <span class="o">&amp;&amp;</span> <span class="o">!</span>assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>first<span class="o">[</span><span class="ss">:code_lines</span><span class="o">]</span>
        <span class="k">end</span>

        assigns<span class="o">[</span><span class="ss">:sections</span><span class="o">]</span><span class="o">.</span>each <span class="k">do</span> <span class="o">|</span>section<span class="o">|</span>
          <span class="k">if</span> section<span class="o">[</span><span class="ss">:code_lines</span><span class="o">]</span>
            section<span class="o">[</span><span class="ss">:code</span><span class="o">]</span> <span class="o">=</span> <span class="s2">"</span><span class="s2">&lt;pre&gt;</span><span class="si">#{</span>section<span class="o">[</span><span class="ss">:code_lines</span><span class="o">]</span><span class="o">.</span>join(<span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>)<span class="si">}</span><span class="s2">&lt;/pre&gt;</span><span class="s2">"</span>
          <span class="k">end</span>
          <span class="k">if</span> section<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span>
            section<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span><span class="o">.</span>pop <span class="k">while</span> section<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span><span class="o">.</span>last <span class="o">==</span> <span class="s2">"</span><span class="s2">"</span>
            comment_md <span class="o">=</span> section<span class="o">[</span><span class="ss">:comment_lines</span><span class="o">]</span><span class="o">.</span>
              map { <span class="o">|</span>ln<span class="o">|</span> ln<span class="o">.</span>sub(<span class="sr">/</span><span class="sr">^</span><span class="sr">\</span><span class="sr">S*</span><span class="sr">\</span><span class="sr">s*</span><span class="sr">/</span>, <span class="s1">''</span>) }<span class="o">.</span>
              join(<span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>)
            section<span class="o">[</span><span class="ss">:comment</span><span class="o">]</span> <span class="o">=</span>
              <span class="ss">Nanoc</span>:<span class="ss">:Filters</span><span class="o">::</span><span class="no">Kramdown</span><span class="o">.</span>new<span class="o">.</span>setup_and_run(comment_md)
          <span class="k">end</span>
        <span class="k">end</span>

        <span class="k">super</span>(<span class="no">HAML_TEMPLATE</span>, params)
      <span class="k">else</span>
        <span class="s2">"</span><span class="s2">&lt;pre&gt;</span><span class="si">#{</span>h(content)<span class="si">}</span><span class="s2">&lt;/pre&gt;</span><span class="s2">"</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">pyg</span>
      <span class="vi">@pyg</span> <span class="o">||</span><span class="o">=</span> <span class="ss">Nanodoc</span>:<span class="ss">:Pygments</span><span class="o">.</span>new(<span class="vi">@item</span>)
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">token_machine</span>
      <span class="vi">@token_machine</span> <span class="o">||</span><span class="o">=</span> create_token_machine
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">line_machine</span>
      <span class="vi">@machine</span> <span class="o">||</span><span class="o">=</span> create_line_machine
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></pre></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <script src="../../../../_static/jquery-1.9.1.min.js"></script>
    <script src="../../../../_static/bootstrap/js/bootstrap.min.js"></script>
  </body>
</html>
